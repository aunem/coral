// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/policy.proto

/*
Package policy is a generated protocol buffer package.

It is generated from these files:
	api/policy.proto

It has these top-level messages:
	Policy
	RoutePolicy
	RequestAttributes
	MethodPolicy
	IDQuery
	Query
	Policies
	Empty
*/
package policy

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Policy struct {
	Id                string             `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	CreatedTime       int64              `protobuf:"varint,2,opt,name=createdTime" json:"createdTime,omitempty"`
	UpdateTime        int64              `protobuf:"varint,3,opt,name=updateTime" json:"updateTime,omitempty"`
	Name              string             `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	EntityAttributes  map[string]string  `protobuf:"bytes,5,rep,name=entityAttributes" json:"entityAttributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Effect            string             `protobuf:"bytes,6,opt,name=effect" json:"effect,omitempty"`
	RequestAttributes *RequestAttributes `protobuf:"bytes,7,opt,name=requestAttributes" json:"requestAttributes,omitempty"`
	Http              []*RoutePolicy     `protobuf:"bytes,8,rep,name=http" json:"http,omitempty"`
	Grpc              []*MethodPolicy    `protobuf:"bytes,9,rep,name=grpc" json:"grpc,omitempty"`
}

func (m *Policy) Reset()                    { *m = Policy{} }
func (m *Policy) String() string            { return proto.CompactTextString(m) }
func (*Policy) ProtoMessage()               {}
func (*Policy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Policy) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Policy) GetCreatedTime() int64 {
	if m != nil {
		return m.CreatedTime
	}
	return 0
}

func (m *Policy) GetUpdateTime() int64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

func (m *Policy) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Policy) GetEntityAttributes() map[string]string {
	if m != nil {
		return m.EntityAttributes
	}
	return nil
}

func (m *Policy) GetEffect() string {
	if m != nil {
		return m.Effect
	}
	return ""
}

func (m *Policy) GetRequestAttributes() *RequestAttributes {
	if m != nil {
		return m.RequestAttributes
	}
	return nil
}

func (m *Policy) GetHttp() []*RoutePolicy {
	if m != nil {
		return m.Http
	}
	return nil
}

func (m *Policy) GetGrpc() []*MethodPolicy {
	if m != nil {
		return m.Grpc
	}
	return nil
}

type RoutePolicy struct {
	Path              string             `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Query             map[string]string  `protobuf:"bytes,2,rep,name=query" json:"query,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Actions           []string           `protobuf:"bytes,3,rep,name=actions" json:"actions,omitempty"`
	RequestAttributes *RequestAttributes `protobuf:"bytes,4,opt,name=requestAttributes" json:"requestAttributes,omitempty"`
}

func (m *RoutePolicy) Reset()                    { *m = RoutePolicy{} }
func (m *RoutePolicy) String() string            { return proto.CompactTextString(m) }
func (*RoutePolicy) ProtoMessage()               {}
func (*RoutePolicy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RoutePolicy) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *RoutePolicy) GetQuery() map[string]string {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *RoutePolicy) GetActions() []string {
	if m != nil {
		return m.Actions
	}
	return nil
}

func (m *RoutePolicy) GetRequestAttributes() *RequestAttributes {
	if m != nil {
		return m.RequestAttributes
	}
	return nil
}

type RequestAttributes struct {
	Headers map[string]string `protobuf:"bytes,1,rep,name=headers" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Cidr    string            `protobuf:"bytes,2,opt,name=cidr" json:"cidr,omitempty"`
	Host    string            `protobuf:"bytes,3,opt,name=host" json:"host,omitempty"`
}

func (m *RequestAttributes) Reset()                    { *m = RequestAttributes{} }
func (m *RequestAttributes) String() string            { return proto.CompactTextString(m) }
func (*RequestAttributes) ProtoMessage()               {}
func (*RequestAttributes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RequestAttributes) GetHeaders() map[string]string {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *RequestAttributes) GetCidr() string {
	if m != nil {
		return m.Cidr
	}
	return ""
}

func (m *RequestAttributes) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

type MethodPolicy struct {
	Service           string             `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
	Methods           []string           `protobuf:"bytes,2,rep,name=methods" json:"methods,omitempty"`
	Parameters        map[string]string  `protobuf:"bytes,3,rep,name=parameters" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	RequestAttributes *RequestAttributes `protobuf:"bytes,4,opt,name=requestAttributes" json:"requestAttributes,omitempty"`
}

func (m *MethodPolicy) Reset()                    { *m = MethodPolicy{} }
func (m *MethodPolicy) String() string            { return proto.CompactTextString(m) }
func (*MethodPolicy) ProtoMessage()               {}
func (*MethodPolicy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *MethodPolicy) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *MethodPolicy) GetMethods() []string {
	if m != nil {
		return m.Methods
	}
	return nil
}

func (m *MethodPolicy) GetParameters() map[string]string {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *MethodPolicy) GetRequestAttributes() *RequestAttributes {
	if m != nil {
		return m.RequestAttributes
	}
	return nil
}

type IDQuery struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *IDQuery) Reset()                    { *m = IDQuery{} }
func (m *IDQuery) String() string            { return proto.CompactTextString(m) }
func (*IDQuery) ProtoMessage()               {}
func (*IDQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *IDQuery) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *IDQuery) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Query struct {
	EntityAttributes map[string]string `protobuf:"bytes,1,rep,name=entityAttributes" json:"entityAttributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Query) Reset()                    { *m = Query{} }
func (m *Query) String() string            { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()               {}
func (*Query) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Query) GetEntityAttributes() map[string]string {
	if m != nil {
		return m.EntityAttributes
	}
	return nil
}

type Policies struct {
	Policies []*Policy `protobuf:"bytes,1,rep,name=policies" json:"policies,omitempty"`
}

func (m *Policies) Reset()                    { *m = Policies{} }
func (m *Policies) String() string            { return proto.CompactTextString(m) }
func (*Policies) ProtoMessage()               {}
func (*Policies) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Policies) GetPolicies() []*Policy {
	if m != nil {
		return m.Policies
	}
	return nil
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func init() {
	proto.RegisterType((*Policy)(nil), "policy.Policy")
	proto.RegisterType((*RoutePolicy)(nil), "policy.RoutePolicy")
	proto.RegisterType((*RequestAttributes)(nil), "policy.RequestAttributes")
	proto.RegisterType((*MethodPolicy)(nil), "policy.MethodPolicy")
	proto.RegisterType((*IDQuery)(nil), "policy.IDQuery")
	proto.RegisterType((*Query)(nil), "policy.Query")
	proto.RegisterType((*Policies)(nil), "policy.Policies")
	proto.RegisterType((*Empty)(nil), "policy.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PolicyService service

type PolicyServiceClient interface {
	GetPolicy(ctx context.Context, in *IDQuery, opts ...grpc.CallOption) (*Policy, error)
	ListPolicies(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Policies, error)
	CreatePolicy(ctx context.Context, in *Policy, opts ...grpc.CallOption) (*Policy, error)
	UpdatePolicy(ctx context.Context, in *Policy, opts ...grpc.CallOption) (*Policy, error)
	PatchPolicy(ctx context.Context, in *Policy, opts ...grpc.CallOption) (*Policy, error)
	DeletePolicy(ctx context.Context, in *IDQuery, opts ...grpc.CallOption) (*Empty, error)
}

type policyServiceClient struct {
	cc *grpc.ClientConn
}

func NewPolicyServiceClient(cc *grpc.ClientConn) PolicyServiceClient {
	return &policyServiceClient{cc}
}

func (c *policyServiceClient) GetPolicy(ctx context.Context, in *IDQuery, opts ...grpc.CallOption) (*Policy, error) {
	out := new(Policy)
	err := grpc.Invoke(ctx, "/policy.PolicyService/GetPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) ListPolicies(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Policies, error) {
	out := new(Policies)
	err := grpc.Invoke(ctx, "/policy.PolicyService/ListPolicies", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) CreatePolicy(ctx context.Context, in *Policy, opts ...grpc.CallOption) (*Policy, error) {
	out := new(Policy)
	err := grpc.Invoke(ctx, "/policy.PolicyService/CreatePolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) UpdatePolicy(ctx context.Context, in *Policy, opts ...grpc.CallOption) (*Policy, error) {
	out := new(Policy)
	err := grpc.Invoke(ctx, "/policy.PolicyService/UpdatePolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) PatchPolicy(ctx context.Context, in *Policy, opts ...grpc.CallOption) (*Policy, error) {
	out := new(Policy)
	err := grpc.Invoke(ctx, "/policy.PolicyService/PatchPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyServiceClient) DeletePolicy(ctx context.Context, in *IDQuery, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/policy.PolicyService/DeletePolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PolicyService service

type PolicyServiceServer interface {
	GetPolicy(context.Context, *IDQuery) (*Policy, error)
	ListPolicies(context.Context, *Query) (*Policies, error)
	CreatePolicy(context.Context, *Policy) (*Policy, error)
	UpdatePolicy(context.Context, *Policy) (*Policy, error)
	PatchPolicy(context.Context, *Policy) (*Policy, error)
	DeletePolicy(context.Context, *IDQuery) (*Empty, error)
}

func RegisterPolicyServiceServer(s *grpc.Server, srv PolicyServiceServer) {
	s.RegisterService(&_PolicyService_serviceDesc, srv)
}

func _PolicyService_GetPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).GetPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/policy.PolicyService/GetPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).GetPolicy(ctx, req.(*IDQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_ListPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).ListPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/policy.PolicyService/ListPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).ListPolicies(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_CreatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Policy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).CreatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/policy.PolicyService/CreatePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).CreatePolicy(ctx, req.(*Policy))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_UpdatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Policy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).UpdatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/policy.PolicyService/UpdatePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).UpdatePolicy(ctx, req.(*Policy))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_PatchPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Policy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).PatchPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/policy.PolicyService/PatchPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).PatchPolicy(ctx, req.(*Policy))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolicyService_DeletePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServiceServer).DeletePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/policy.PolicyService/DeletePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServiceServer).DeletePolicy(ctx, req.(*IDQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _PolicyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "policy.PolicyService",
	HandlerType: (*PolicyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPolicy",
			Handler:    _PolicyService_GetPolicy_Handler,
		},
		{
			MethodName: "ListPolicies",
			Handler:    _PolicyService_ListPolicies_Handler,
		},
		{
			MethodName: "CreatePolicy",
			Handler:    _PolicyService_CreatePolicy_Handler,
		},
		{
			MethodName: "UpdatePolicy",
			Handler:    _PolicyService_UpdatePolicy_Handler,
		},
		{
			MethodName: "PatchPolicy",
			Handler:    _PolicyService_PatchPolicy_Handler,
		},
		{
			MethodName: "DeletePolicy",
			Handler:    _PolicyService_DeletePolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/policy.proto",
}

func init() { proto.RegisterFile("api/policy.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 743 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xdd, 0x6e, 0xd3, 0x4c,
	0x10, 0x95, 0xed, 0xfc, 0xd4, 0x13, 0xb7, 0x4d, 0xf7, 0xeb, 0x07, 0x26, 0x42, 0x55, 0x14, 0xaa,
	0x12, 0x55, 0x22, 0x91, 0x02, 0x42, 0x55, 0x25, 0xa4, 0xd2, 0xa6, 0x14, 0x24, 0x10, 0xc1, 0xc0,
	0x0d, 0x77, 0x5b, 0x7b, 0x9b, 0xac, 0x9a, 0xc4, 0xae, 0xbd, 0xae, 0x14, 0x21, 0x6e, 0x78, 0x02,
	0x24, 0xae, 0x79, 0x07, 0x6e, 0xfb, 0x1c, 0xbc, 0x02, 0x8f, 0xc0, 0x03, 0x20, 0xcf, 0xae, 0x53,
	0x27, 0x0e, 0x52, 0x23, 0xf5, 0x6e, 0xd7, 0x7b, 0xf6, 0xcc, 0x99, 0x33, 0xe3, 0x59, 0xa8, 0xd2,
	0x80, 0xb7, 0x03, 0x7f, 0xc8, 0xdd, 0x49, 0x2b, 0x08, 0x7d, 0xe1, 0x93, 0x92, 0xdc, 0xd5, 0xee,
	0xf7, 0x7d, 0xbf, 0x3f, 0x64, 0xed, 0x04, 0x40, 0xc7, 0x63, 0x5f, 0x50, 0xc1, 0xfd, 0x71, 0x24,
	0x51, 0x8d, 0x2b, 0x03, 0x4a, 0x3d, 0x04, 0x92, 0x35, 0xd0, 0xb9, 0x67, 0x6b, 0x75, 0xad, 0x69,
	0x3a, 0x3a, 0xf7, 0x48, 0x1d, 0x2a, 0x6e, 0xc8, 0xa8, 0x60, 0xde, 0x07, 0x3e, 0x62, 0xb6, 0x5e,
	0xd7, 0x9a, 0x86, 0x93, 0xfd, 0x44, 0xb6, 0x00, 0xe2, 0xc0, 0xa3, 0x82, 0x21, 0xc0, 0x40, 0x40,
	0xe6, 0x0b, 0x21, 0x50, 0x18, 0xd3, 0x11, 0xb3, 0x0b, 0xc8, 0x89, 0x6b, 0xd2, 0x83, 0x2a, 0x1b,
	0x0b, 0x2e, 0x26, 0xcf, 0x85, 0x08, 0xf9, 0x69, 0x2c, 0x58, 0x64, 0x17, 0xeb, 0x46, 0xb3, 0xd2,
	0xd9, 0x6e, 0x29, 0xfd, 0x52, 0x4f, 0xeb, 0x78, 0x0e, 0x76, 0x3c, 0x16, 0xe1, 0xc4, 0xc9, 0xdd,
	0x26, 0x77, 0xa0, 0xc4, 0xce, 0xce, 0x98, 0x2b, 0xec, 0x12, 0xc6, 0x51, 0x3b, 0x72, 0x02, 0x1b,
	0x21, 0xbb, 0x88, 0x59, 0x24, 0x32, 0xa1, 0xca, 0x75, 0xad, 0x59, 0xe9, 0xdc, 0x4b, 0x43, 0x39,
	0xf3, 0x00, 0x27, 0x7f, 0x87, 0x3c, 0x84, 0xc2, 0x40, 0x88, 0xc0, 0x5e, 0x41, 0x99, 0xff, 0x4d,
	0xef, 0xfa, 0xb1, 0x60, 0x52, 0xab, 0x83, 0x00, 0xd2, 0x84, 0x42, 0x3f, 0x0c, 0x5c, 0xdb, 0x44,
	0xe0, 0x66, 0x0a, 0x7c, 0xc3, 0xc4, 0xc0, 0xf7, 0x52, 0x64, 0x82, 0xa8, 0x1d, 0xc1, 0xff, 0x0b,
	0xd3, 0x23, 0x55, 0x30, 0xce, 0xd9, 0x44, 0x55, 0x21, 0x59, 0x92, 0x4d, 0x28, 0x5e, 0xd2, 0x61,
	0x2c, 0x0b, 0x60, 0x3a, 0x72, 0xb3, 0xaf, 0xef, 0x69, 0x8d, 0x3f, 0x1a, 0x54, 0x32, 0x22, 0x12,
	0xbb, 0x03, 0x2a, 0x06, 0xea, 0x32, 0xae, 0xc9, 0x13, 0x28, 0x5e, 0xc4, 0x2c, 0x9c, 0xd8, 0x3a,
	0x6a, 0xda, 0x5a, 0x20, 0xbe, 0xf5, 0x2e, 0x01, 0x48, 0x77, 0x25, 0x98, 0xd8, 0x50, 0xa6, 0x2e,
	0xb6, 0x89, 0x6d, 0xd4, 0x8d, 0xa6, 0xe9, 0xa4, 0xdb, 0xc5, 0xa6, 0x16, 0x96, 0x37, 0xb5, 0xb6,
	0x07, 0x70, 0x1d, 0x77, 0xa9, 0xb4, 0xaf, 0x34, 0xd8, 0xc8, 0x85, 0x20, 0x07, 0x50, 0x1e, 0x30,
	0xea, 0xb1, 0x30, 0xb2, 0x35, 0x4c, 0x75, 0xe7, 0x9f, 0x72, 0x5a, 0x2f, 0x25, 0x50, 0xa6, 0x9c,
	0x5e, 0x4b, 0xec, 0x73, 0xb9, 0x17, 0xaa, 0x80, 0xb8, 0x4e, 0xbe, 0x0d, 0xfc, 0x48, 0x60, 0x6f,
	0x9b, 0x0e, 0xae, 0x6b, 0xfb, 0x60, 0x65, 0x09, 0x96, 0xd2, 0xfe, 0x4d, 0x07, 0x2b, 0xdb, 0x0e,
	0x89, 0xd3, 0x11, 0x0b, 0x2f, 0xb9, 0xcb, 0x14, 0x41, 0xba, 0x4d, 0x4e, 0x46, 0x88, 0x8c, 0xb0,
	0x76, 0xa6, 0x93, 0x6e, 0x49, 0x17, 0x20, 0xa0, 0x21, 0x1d, 0x31, 0x91, 0x64, 0x6b, 0xcc, 0xfe,
	0x3c, 0x59, 0xf6, 0x56, 0x6f, 0x0a, 0x93, 0xb9, 0x66, 0xee, 0xdd, 0x5e, 0x25, 0x9f, 0xc1, 0xfa,
	0x5c, 0x9c, 0xa5, 0x2c, 0x79, 0x04, 0xe5, 0x57, 0x5d, 0x6c, 0x85, 0xdc, 0x04, 0x4a, 0xe7, 0x87,
	0x7e, 0x3d, 0x3f, 0x1a, 0x3f, 0x34, 0x28, 0x4a, 0xf4, 0xdb, 0x05, 0x93, 0x44, 0x96, 0xfe, 0x41,
	0xaa, 0x1f, 0x81, 0x37, 0x1d, 0x24, 0xb7, 0xf3, 0x53, 0x3e, 0x85, 0x15, 0x34, 0x9f, 0xb3, 0x88,
	0xec, 0xc2, 0x4a, 0xa0, 0xd6, 0x4a, 0xd9, 0xda, 0xec, 0x8c, 0x73, 0xa6, 0xe7, 0x8d, 0x32, 0x14,
	0x8f, 0x47, 0x81, 0x98, 0x74, 0x7e, 0x1a, 0xb0, 0x2a, 0x4f, 0xdf, 0xab, 0x4e, 0x38, 0x04, 0xf3,
	0x84, 0x09, 0xd5, 0x30, 0xeb, 0x29, 0x83, 0x32, 0xad, 0x36, 0x47, 0xd9, 0xd8, 0xfc, 0xfa, 0xeb,
	0xf7, 0x77, 0x7d, 0x8d, 0x58, 0xea, 0x39, 0x68, 0x7f, 0xe6, 0xde, 0x17, 0x72, 0x00, 0xd6, 0x6b,
	0x1e, 0x89, 0xa9, 0xb4, 0xd5, 0x19, 0x8b, 0x6a, 0xd5, 0x19, 0x92, 0x44, 0xcf, 0x3a, 0xd2, 0x98,
	0xa4, 0xac, 0x68, 0xc8, 0x21, 0x58, 0x47, 0x38, 0xfb, 0xd3, 0xe7, 0x62, 0x36, 0x6e, 0x4e, 0x07,
	0x41, 0x02, 0xab, 0x91, 0x12, 0xec, 0x6b, 0xbb, 0xe4, 0x04, 0xac, 0x8f, 0xf8, 0x3c, 0xdc, 0x90,
	0xe3, 0x2e, 0x72, 0x6c, 0xd4, 0x66, 0x72, 0x49, 0x88, 0x5e, 0x40, 0xa5, 0x47, 0x85, 0x3b, 0x58,
	0x8e, 0xa7, 0x93, 0xe3, 0xe9, 0x82, 0xd5, 0x65, 0x43, 0x36, 0x15, 0x94, 0x73, 0x77, 0xea, 0x13,
	0x16, 0x27, 0x35, 0x77, 0x77, 0x86, 0xe8, 0x70, 0xe7, 0xd3, 0x76, 0x9f, 0x8b, 0x41, 0x7c, 0xda,
	0x72, 0xfd, 0x51, 0x9b, 0xc6, 0x63, 0x36, 0x6a, 0xbb, 0x7e, 0x48, 0x87, 0xed, 0xc8, 0x3b, 0x6f,
	0xf7, 0x7d, 0x05, 0x3e, 0x2d, 0xe1, 0x9b, 0xfb, 0xf8, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2c,
	0x53, 0xdb, 0x86, 0xad, 0x07, 0x00, 0x00,
}
