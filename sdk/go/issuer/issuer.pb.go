// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/issuer.proto

/*
Package issuer is a generated protocol buffer package.

It is generated from these files:
	api/issuer.proto

It has these top-level messages:
	Issuer
	Issuers
	IDQuery
	Query
	Empty
*/
package issuer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Issuer struct {
	Id           string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	CreatedTime  int64  `protobuf:"varint,2,opt,name=createdTime" json:"createdTime,omitempty"`
	UpdateTime   int64  `protobuf:"varint,3,opt,name=updateTime" json:"updateTime,omitempty"`
	Name         string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Issuer       string `protobuf:"bytes,5,opt,name=issuer" json:"issuer,omitempty"`
	JwksUri      string `protobuf:"bytes,6,opt,name=jwksUri" json:"jwksUri,omitempty"`
	IssuerClaim  string `protobuf:"bytes,7,opt,name=issuerClaim" json:"issuerClaim,omitempty"`
	SubjectClaim string `protobuf:"bytes,8,opt,name=subjectClaim" json:"subjectClaim,omitempty"`
	ExpiresClaim string `protobuf:"bytes,9,opt,name=expiresClaim" json:"expiresClaim,omitempty"`
}

func (m *Issuer) Reset()                    { *m = Issuer{} }
func (m *Issuer) String() string            { return proto.CompactTextString(m) }
func (*Issuer) ProtoMessage()               {}
func (*Issuer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Issuer) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Issuer) GetCreatedTime() int64 {
	if m != nil {
		return m.CreatedTime
	}
	return 0
}

func (m *Issuer) GetUpdateTime() int64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

func (m *Issuer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Issuer) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *Issuer) GetJwksUri() string {
	if m != nil {
		return m.JwksUri
	}
	return ""
}

func (m *Issuer) GetIssuerClaim() string {
	if m != nil {
		return m.IssuerClaim
	}
	return ""
}

func (m *Issuer) GetSubjectClaim() string {
	if m != nil {
		return m.SubjectClaim
	}
	return ""
}

func (m *Issuer) GetExpiresClaim() string {
	if m != nil {
		return m.ExpiresClaim
	}
	return ""
}

type Issuers struct {
	Issuers []*Issuer `protobuf:"bytes,1,rep,name=issuers" json:"issuers,omitempty"`
}

func (m *Issuers) Reset()                    { *m = Issuers{} }
func (m *Issuers) String() string            { return proto.CompactTextString(m) }
func (*Issuers) ProtoMessage()               {}
func (*Issuers) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Issuers) GetIssuers() []*Issuer {
	if m != nil {
		return m.Issuers
	}
	return nil
}

type IDQuery struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *IDQuery) Reset()                    { *m = IDQuery{} }
func (m *IDQuery) String() string            { return proto.CompactTextString(m) }
func (*IDQuery) ProtoMessage()               {}
func (*IDQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *IDQuery) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Query struct {
	Name   string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Issuer string `protobuf:"bytes,2,opt,name=issuer" json:"issuer,omitempty"`
}

func (m *Query) Reset()                    { *m = Query{} }
func (m *Query) String() string            { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()               {}
func (*Query) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Query) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Query) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func init() {
	proto.RegisterType((*Issuer)(nil), "issuer.Issuer")
	proto.RegisterType((*Issuers)(nil), "issuer.Issuers")
	proto.RegisterType((*IDQuery)(nil), "issuer.IDQuery")
	proto.RegisterType((*Query)(nil), "issuer.Query")
	proto.RegisterType((*Empty)(nil), "issuer.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for IssuerService service

type IssuerServiceClient interface {
	GetIssuer(ctx context.Context, in *IDQuery, opts ...grpc.CallOption) (*Issuer, error)
	ListIssuers(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Issuers, error)
	CreateIssuer(ctx context.Context, in *Issuer, opts ...grpc.CallOption) (*Issuer, error)
	UpdateIssuer(ctx context.Context, in *Issuer, opts ...grpc.CallOption) (*Issuer, error)
	PatchIssuer(ctx context.Context, in *Issuer, opts ...grpc.CallOption) (*Issuer, error)
	DeleteIssuer(ctx context.Context, in *IDQuery, opts ...grpc.CallOption) (*Empty, error)
}

type issuerServiceClient struct {
	cc *grpc.ClientConn
}

func NewIssuerServiceClient(cc *grpc.ClientConn) IssuerServiceClient {
	return &issuerServiceClient{cc}
}

func (c *issuerServiceClient) GetIssuer(ctx context.Context, in *IDQuery, opts ...grpc.CallOption) (*Issuer, error) {
	out := new(Issuer)
	err := grpc.Invoke(ctx, "/issuer.IssuerService/GetIssuer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuerServiceClient) ListIssuers(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Issuers, error) {
	out := new(Issuers)
	err := grpc.Invoke(ctx, "/issuer.IssuerService/ListIssuers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuerServiceClient) CreateIssuer(ctx context.Context, in *Issuer, opts ...grpc.CallOption) (*Issuer, error) {
	out := new(Issuer)
	err := grpc.Invoke(ctx, "/issuer.IssuerService/CreateIssuer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuerServiceClient) UpdateIssuer(ctx context.Context, in *Issuer, opts ...grpc.CallOption) (*Issuer, error) {
	out := new(Issuer)
	err := grpc.Invoke(ctx, "/issuer.IssuerService/UpdateIssuer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuerServiceClient) PatchIssuer(ctx context.Context, in *Issuer, opts ...grpc.CallOption) (*Issuer, error) {
	out := new(Issuer)
	err := grpc.Invoke(ctx, "/issuer.IssuerService/PatchIssuer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuerServiceClient) DeleteIssuer(ctx context.Context, in *IDQuery, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/issuer.IssuerService/DeleteIssuer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IssuerService service

type IssuerServiceServer interface {
	GetIssuer(context.Context, *IDQuery) (*Issuer, error)
	ListIssuers(context.Context, *Query) (*Issuers, error)
	CreateIssuer(context.Context, *Issuer) (*Issuer, error)
	UpdateIssuer(context.Context, *Issuer) (*Issuer, error)
	PatchIssuer(context.Context, *Issuer) (*Issuer, error)
	DeleteIssuer(context.Context, *IDQuery) (*Empty, error)
}

func RegisterIssuerServiceServer(s *grpc.Server, srv IssuerServiceServer) {
	s.RegisterService(&_IssuerService_serviceDesc, srv)
}

func _IssuerService_GetIssuer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuerServiceServer).GetIssuer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/issuer.IssuerService/GetIssuer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuerServiceServer).GetIssuer(ctx, req.(*IDQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssuerService_ListIssuers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuerServiceServer).ListIssuers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/issuer.IssuerService/ListIssuers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuerServiceServer).ListIssuers(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssuerService_CreateIssuer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Issuer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuerServiceServer).CreateIssuer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/issuer.IssuerService/CreateIssuer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuerServiceServer).CreateIssuer(ctx, req.(*Issuer))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssuerService_UpdateIssuer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Issuer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuerServiceServer).UpdateIssuer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/issuer.IssuerService/UpdateIssuer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuerServiceServer).UpdateIssuer(ctx, req.(*Issuer))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssuerService_PatchIssuer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Issuer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuerServiceServer).PatchIssuer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/issuer.IssuerService/PatchIssuer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuerServiceServer).PatchIssuer(ctx, req.(*Issuer))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssuerService_DeleteIssuer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuerServiceServer).DeleteIssuer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/issuer.IssuerService/DeleteIssuer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuerServiceServer).DeleteIssuer(ctx, req.(*IDQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _IssuerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "issuer.IssuerService",
	HandlerType: (*IssuerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIssuer",
			Handler:    _IssuerService_GetIssuer_Handler,
		},
		{
			MethodName: "ListIssuers",
			Handler:    _IssuerService_ListIssuers_Handler,
		},
		{
			MethodName: "CreateIssuer",
			Handler:    _IssuerService_CreateIssuer_Handler,
		},
		{
			MethodName: "UpdateIssuer",
			Handler:    _IssuerService_UpdateIssuer_Handler,
		},
		{
			MethodName: "PatchIssuer",
			Handler:    _IssuerService_PatchIssuer_Handler,
		},
		{
			MethodName: "DeleteIssuer",
			Handler:    _IssuerService_DeleteIssuer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/issuer.proto",
}

func init() { proto.RegisterFile("api/issuer.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 468 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xc1, 0x8e, 0xd3, 0x30,
	0x10, 0x86, 0x95, 0x74, 0xdb, 0xd0, 0x69, 0xb6, 0x85, 0x11, 0x82, 0x50, 0x21, 0x54, 0x59, 0x08,
	0x55, 0x7b, 0x68, 0xa4, 0xf6, 0xc6, 0x81, 0x43, 0xb7, 0xb0, 0x5a, 0x89, 0x03, 0x14, 0xf6, 0xc2,
	0xcd, 0x4d, 0x46, 0x5d, 0xef, 0x36, 0x71, 0x14, 0x3b, 0xc0, 0x0a, 0x71, 0xe1, 0xc8, 0x95, 0xf7,
	0xe0, 0x65, 0x78, 0x05, 0x1e, 0x04, 0xc5, 0x4e, 0xaa, 0x64, 0xcb, 0x01, 0x6e, 0xf1, 0xcc, 0xef,
	0xcf, 0xbf, 0x7f, 0x4f, 0xe0, 0x2e, 0xcf, 0x44, 0x28, 0x94, 0x2a, 0x28, 0x9f, 0x65, 0xb9, 0xd4,
	0x12, 0x7b, 0x76, 0x35, 0x7e, 0xbc, 0x95, 0x72, 0xbb, 0xa3, 0xb0, 0x14, 0xf0, 0x34, 0x95, 0x9a,
	0x6b, 0x21, 0x53, 0x65, 0x55, 0xec, 0xbb, 0x0b, 0xbd, 0x73, 0x23, 0xc4, 0x21, 0xb8, 0x22, 0x0e,
	0x9c, 0x89, 0x33, 0xed, 0xaf, 0x5d, 0x11, 0xe3, 0x04, 0x06, 0x51, 0x4e, 0x5c, 0x53, 0xfc, 0x5e,
	0x24, 0x14, 0xb8, 0x13, 0x67, 0xda, 0x59, 0x37, 0x4b, 0xf8, 0x04, 0xa0, 0xc8, 0x62, 0xae, 0xc9,
	0x08, 0x3a, 0x46, 0xd0, 0xa8, 0x20, 0xc2, 0x51, 0xca, 0x13, 0x0a, 0x8e, 0x0c, 0xd3, 0x7c, 0xe3,
	0x03, 0xa8, 0x8c, 0x05, 0x5d, 0x53, 0xad, 0x56, 0x18, 0x80, 0x77, 0xf5, 0xe9, 0x5a, 0x5d, 0xe4,
	0x22, 0xe8, 0x99, 0x46, 0xbd, 0x2c, 0x7d, 0x58, 0xcd, 0xe9, 0x8e, 0x8b, 0x24, 0xf0, 0x4c, 0xb7,
	0x59, 0x42, 0x06, 0xbe, 0x2a, 0x36, 0x57, 0x14, 0x69, 0x2b, 0xb9, 0x63, 0x24, 0xad, 0x5a, 0xa9,
	0xa1, 0xcf, 0x99, 0xc8, 0x49, 0x59, 0x4d, 0xdf, 0x6a, 0x9a, 0x35, 0xb6, 0x00, 0xcf, 0x66, 0xa1,
	0x70, 0x0a, 0x9e, 0x3d, 0x41, 0x05, 0xce, 0xa4, 0x33, 0x1d, 0xcc, 0x87, 0xb3, 0x2a, 0x5d, 0xab,
	0x58, 0xd7, 0x6d, 0xf6, 0x08, 0xbc, 0xf3, 0xd5, 0xdb, 0x82, 0xf2, 0x9b, 0xdb, 0x09, 0xb2, 0x05,
	0x74, 0x6d, 0xa3, 0x0e, 0xc2, 0xf9, 0x6b, 0x10, 0x6e, 0x33, 0x08, 0xe6, 0x41, 0xf7, 0x65, 0x92,
	0xe9, 0x9b, 0xf9, 0xcf, 0x0e, 0x1c, 0xdb, 0xc3, 0xde, 0x51, 0xfe, 0x51, 0x44, 0x84, 0x4b, 0xe8,
	0x9f, 0x91, 0xae, 0x9e, 0x6b, 0xb4, 0x37, 0x64, 0x4f, 0x1f, 0xdf, 0x72, 0xc8, 0xee, 0x7f, 0xfb,
	0xf5, 0xfb, 0x87, 0x3b, 0x44, 0xbf, 0x9a, 0x8b, 0xf0, 0x8b, 0x88, 0xbf, 0xe2, 0x0b, 0x18, 0xbc,
	0x16, 0x4a, 0xd7, 0xf7, 0x3c, 0xae, 0x37, 0x59, 0xc6, 0xa8, 0xcd, 0x50, 0x6c, 0x64, 0x20, 0x7d,
	0xf4, 0x2a, 0x08, 0x2e, 0xc1, 0x3f, 0x35, 0x23, 0x50, 0x4f, 0x4d, 0x7b, 0xc7, 0x81, 0x0b, 0x34,
	0x00, 0x9f, 0xd5, 0x80, 0xe7, 0xce, 0x09, 0x9e, 0x81, 0x7f, 0x61, 0xa6, 0xe4, 0x1f, 0x19, 0x0f,
	0x0d, 0xe3, 0xde, 0xb8, 0x75, 0x93, 0x12, 0xf4, 0x0a, 0x06, 0x6f, 0xb8, 0x8e, 0x2e, 0xff, 0x8f,
	0x33, 0x3f, 0xe0, 0xac, 0xc0, 0x5f, 0xd1, 0x8e, 0xf6, 0x86, 0x0e, 0xb2, 0xdd, 0xc7, 0x64, 0x9e,
	0xa6, 0x8e, 0xf6, 0xa4, 0x05, 0x5a, 0x3e, 0xfb, 0xf0, 0x74, 0x2b, 0xf4, 0x65, 0xb1, 0x99, 0x45,
	0x32, 0x09, 0x79, 0x91, 0x52, 0x12, 0x46, 0x32, 0xe7, 0xbb, 0x50, 0xc5, 0xd7, 0xe1, 0x56, 0x56,
	0xe2, 0x4d, 0xcf, 0xfc, 0x7a, 0x8b, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x1c, 0x4f, 0x48, 0xb0,
	0xb4, 0x03, 0x00, 0x00,
}
