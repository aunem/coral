// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/auth.proto

/*
Package auth is a generated protocol buffer package.

It is generated from these files:
	api/auth.proto

It has these top-level messages:
	AuthorizationRequest
	HeaderVals
	HTTPRequest
	GRPCRequest
	AuthorizationResponse
	AuthorizationSigningResponse
	SigningRequest
	SigningResponse
	SigningPayloadRequest
	SigningPayloadResponse
	WellKnownResponse
	JWKsResponse
	JWTEnc
	JWKEnc
	Empty
*/
package auth

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import entity "github.com/kubecorp/coral/sdk/go/entity"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AuthorizationRequest struct {
	Http       *HTTPRequest           `protobuf:"bytes,1,opt,name=http" json:"http,omitempty"`
	Grpc       *GRPCRequest           `protobuf:"bytes,2,opt,name=grpc" json:"grpc,omitempty"`
	Headers    map[string]*HeaderVals `protobuf:"bytes,3,rep,name=headers" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	RemoteAddr string                 `protobuf:"bytes,4,opt,name=remoteAddr" json:"remoteAddr,omitempty"`
	Host       string                 `protobuf:"bytes,5,opt,name=host" json:"host,omitempty"`
	RequestID  string                 `protobuf:"bytes,6,opt,name=requestID" json:"requestID,omitempty"`
	Charge     bool                   `protobuf:"varint,7,opt,name=charge" json:"charge,omitempty"`
}

func (m *AuthorizationRequest) Reset()                    { *m = AuthorizationRequest{} }
func (m *AuthorizationRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthorizationRequest) ProtoMessage()               {}
func (*AuthorizationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AuthorizationRequest) GetHttp() *HTTPRequest {
	if m != nil {
		return m.Http
	}
	return nil
}

func (m *AuthorizationRequest) GetGrpc() *GRPCRequest {
	if m != nil {
		return m.Grpc
	}
	return nil
}

func (m *AuthorizationRequest) GetHeaders() map[string]*HeaderVals {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *AuthorizationRequest) GetRemoteAddr() string {
	if m != nil {
		return m.RemoteAddr
	}
	return ""
}

func (m *AuthorizationRequest) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *AuthorizationRequest) GetRequestID() string {
	if m != nil {
		return m.RequestID
	}
	return ""
}

func (m *AuthorizationRequest) GetCharge() bool {
	if m != nil {
		return m.Charge
	}
	return false
}

type HeaderVals struct {
	Values []string `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
}

func (m *HeaderVals) Reset()                    { *m = HeaderVals{} }
func (m *HeaderVals) String() string            { return proto.CompactTextString(m) }
func (*HeaderVals) ProtoMessage()               {}
func (*HeaderVals) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HeaderVals) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

type HTTPRequest struct {
	Path   string            `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Action string            `protobuf:"bytes,2,opt,name=action" json:"action,omitempty"`
	Query  map[string]string `protobuf:"bytes,3,rep,name=query" json:"query,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *HTTPRequest) Reset()                    { *m = HTTPRequest{} }
func (m *HTTPRequest) String() string            { return proto.CompactTextString(m) }
func (*HTTPRequest) ProtoMessage()               {}
func (*HTTPRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *HTTPRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *HTTPRequest) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *HTTPRequest) GetQuery() map[string]string {
	if m != nil {
		return m.Query
	}
	return nil
}

type GRPCRequest struct {
	Service    string            `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
	Method     string            `protobuf:"bytes,2,opt,name=method" json:"method,omitempty"`
	Parameters map[string]string `protobuf:"bytes,3,rep,name=parameters" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *GRPCRequest) Reset()                    { *m = GRPCRequest{} }
func (m *GRPCRequest) String() string            { return proto.CompactTextString(m) }
func (*GRPCRequest) ProtoMessage()               {}
func (*GRPCRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GRPCRequest) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *GRPCRequest) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *GRPCRequest) GetParameters() map[string]string {
	if m != nil {
		return m.Parameters
	}
	return nil
}

type AuthorizationResponse struct {
	Allowed bool           `protobuf:"varint,1,opt,name=allowed" json:"allowed,omitempty"`
	Entity  *entity.Entity `protobuf:"bytes,2,opt,name=entity" json:"entity,omitempty"`
}

func (m *AuthorizationResponse) Reset()                    { *m = AuthorizationResponse{} }
func (m *AuthorizationResponse) String() string            { return proto.CompactTextString(m) }
func (*AuthorizationResponse) ProtoMessage()               {}
func (*AuthorizationResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AuthorizationResponse) GetAllowed() bool {
	if m != nil {
		return m.Allowed
	}
	return false
}

func (m *AuthorizationResponse) GetEntity() *entity.Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

type AuthorizationSigningResponse struct {
	Allowed bool   `protobuf:"varint,1,opt,name=allowed" json:"allowed,omitempty"`
	Jwt     string `protobuf:"bytes,2,opt,name=jwt" json:"jwt,omitempty"`
}

func (m *AuthorizationSigningResponse) Reset()                    { *m = AuthorizationSigningResponse{} }
func (m *AuthorizationSigningResponse) String() string            { return proto.CompactTextString(m) }
func (*AuthorizationSigningResponse) ProtoMessage()               {}
func (*AuthorizationSigningResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AuthorizationSigningResponse) GetAllowed() bool {
	if m != nil {
		return m.Allowed
	}
	return false
}

func (m *AuthorizationSigningResponse) GetJwt() string {
	if m != nil {
		return m.Jwt
	}
	return ""
}

type SigningRequest struct {
	Jwt string `protobuf:"bytes,1,opt,name=jwt" json:"jwt,omitempty"`
}

func (m *SigningRequest) Reset()                    { *m = SigningRequest{} }
func (m *SigningRequest) String() string            { return proto.CompactTextString(m) }
func (*SigningRequest) ProtoMessage()               {}
func (*SigningRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SigningRequest) GetJwt() string {
	if m != nil {
		return m.Jwt
	}
	return ""
}

type SigningResponse struct {
	Jwt string `protobuf:"bytes,1,opt,name=jwt" json:"jwt,omitempty"`
}

func (m *SigningResponse) Reset()                    { *m = SigningResponse{} }
func (m *SigningResponse) String() string            { return proto.CompactTextString(m) }
func (*SigningResponse) ProtoMessage()               {}
func (*SigningResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SigningResponse) GetJwt() string {
	if m != nil {
		return m.Jwt
	}
	return ""
}

type SigningPayloadRequest struct {
	Payload string `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
}

func (m *SigningPayloadRequest) Reset()                    { *m = SigningPayloadRequest{} }
func (m *SigningPayloadRequest) String() string            { return proto.CompactTextString(m) }
func (*SigningPayloadRequest) ProtoMessage()               {}
func (*SigningPayloadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *SigningPayloadRequest) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

type SigningPayloadResponse struct {
	Jwt string `protobuf:"bytes,1,opt,name=jwt" json:"jwt,omitempty"`
}

func (m *SigningPayloadResponse) Reset()                    { *m = SigningPayloadResponse{} }
func (m *SigningPayloadResponse) String() string            { return proto.CompactTextString(m) }
func (*SigningPayloadResponse) ProtoMessage()               {}
func (*SigningPayloadResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *SigningPayloadResponse) GetJwt() string {
	if m != nil {
		return m.Jwt
	}
	return ""
}

type WellKnownResponse struct {
	Issuer  string `protobuf:"bytes,1,opt,name=issuer" json:"issuer,omitempty"`
	JwksUri string `protobuf:"bytes,2,opt,name=jwksUri" json:"jwksUri,omitempty"`
}

func (m *WellKnownResponse) Reset()                    { *m = WellKnownResponse{} }
func (m *WellKnownResponse) String() string            { return proto.CompactTextString(m) }
func (*WellKnownResponse) ProtoMessage()               {}
func (*WellKnownResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *WellKnownResponse) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *WellKnownResponse) GetJwksUri() string {
	if m != nil {
		return m.JwksUri
	}
	return ""
}

type JWKsResponse struct {
	Keys map[string]*JWKEnc `protobuf:"bytes,1,rep,name=keys" json:"keys,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *JWKsResponse) Reset()                    { *m = JWKsResponse{} }
func (m *JWKsResponse) String() string            { return proto.CompactTextString(m) }
func (*JWKsResponse) ProtoMessage()               {}
func (*JWKsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *JWKsResponse) GetKeys() map[string]*JWKEnc {
	if m != nil {
		return m.Keys
	}
	return nil
}

type JWTEnc struct {
	Jwt     string `protobuf:"bytes,1,opt,name=jwt" json:"jwt,omitempty"`
	Expires int64  `protobuf:"varint,2,opt,name=expires" json:"expires,omitempty"`
}

func (m *JWTEnc) Reset()                    { *m = JWTEnc{} }
func (m *JWTEnc) String() string            { return proto.CompactTextString(m) }
func (*JWTEnc) ProtoMessage()               {}
func (*JWTEnc) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *JWTEnc) GetJwt() string {
	if m != nil {
		return m.Jwt
	}
	return ""
}

func (m *JWTEnc) GetExpires() int64 {
	if m != nil {
		return m.Expires
	}
	return 0
}

type JWKEnc struct {
	Jwk     string `protobuf:"bytes,1,opt,name=jwk" json:"jwk,omitempty"`
	Expires int64  `protobuf:"varint,2,opt,name=expires" json:"expires,omitempty"`
}

func (m *JWKEnc) Reset()                    { *m = JWKEnc{} }
func (m *JWKEnc) String() string            { return proto.CompactTextString(m) }
func (*JWKEnc) ProtoMessage()               {}
func (*JWKEnc) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *JWKEnc) GetJwk() string {
	if m != nil {
		return m.Jwk
	}
	return ""
}

func (m *JWKEnc) GetExpires() int64 {
	if m != nil {
		return m.Expires
	}
	return 0
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func init() {
	proto.RegisterType((*AuthorizationRequest)(nil), "auth.AuthorizationRequest")
	proto.RegisterType((*HeaderVals)(nil), "auth.HeaderVals")
	proto.RegisterType((*HTTPRequest)(nil), "auth.HTTPRequest")
	proto.RegisterType((*GRPCRequest)(nil), "auth.GRPCRequest")
	proto.RegisterType((*AuthorizationResponse)(nil), "auth.AuthorizationResponse")
	proto.RegisterType((*AuthorizationSigningResponse)(nil), "auth.AuthorizationSigningResponse")
	proto.RegisterType((*SigningRequest)(nil), "auth.SigningRequest")
	proto.RegisterType((*SigningResponse)(nil), "auth.SigningResponse")
	proto.RegisterType((*SigningPayloadRequest)(nil), "auth.SigningPayloadRequest")
	proto.RegisterType((*SigningPayloadResponse)(nil), "auth.SigningPayloadResponse")
	proto.RegisterType((*WellKnownResponse)(nil), "auth.WellKnownResponse")
	proto.RegisterType((*JWKsResponse)(nil), "auth.JWKsResponse")
	proto.RegisterType((*JWTEnc)(nil), "auth.JWTEnc")
	proto.RegisterType((*JWKEnc)(nil), "auth.JWKEnc")
	proto.RegisterType((*Empty)(nil), "auth.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AuthService service

type AuthServiceClient interface {
	Authorize(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*AuthorizationResponse, error)
	AuthorizeAndSign(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*AuthorizationSigningResponse, error)
	Sign(ctx context.Context, in *SigningRequest, opts ...grpc.CallOption) (*SigningResponse, error)
	SignPayload(ctx context.Context, in *SigningPayloadRequest, opts ...grpc.CallOption) (*SigningPayloadResponse, error)
	SignBasic(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SigningResponse, error)
	EntityInfo(ctx context.Context, in *JWTEnc, opts ...grpc.CallOption) (*entity.Entity, error)
	WellKnown(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*WellKnownResponse, error)
	JWKs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*JWKsResponse, error)
}

type authServiceClient struct {
	cc *grpc.ClientConn
}

func NewAuthServiceClient(cc *grpc.ClientConn) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) Authorize(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*AuthorizationResponse, error) {
	out := new(AuthorizationResponse)
	err := grpc.Invoke(ctx, "/auth.AuthService/Authorize", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AuthorizeAndSign(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*AuthorizationSigningResponse, error) {
	out := new(AuthorizationSigningResponse)
	err := grpc.Invoke(ctx, "/auth.AuthService/AuthorizeAndSign", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) Sign(ctx context.Context, in *SigningRequest, opts ...grpc.CallOption) (*SigningResponse, error) {
	out := new(SigningResponse)
	err := grpc.Invoke(ctx, "/auth.AuthService/Sign", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) SignPayload(ctx context.Context, in *SigningPayloadRequest, opts ...grpc.CallOption) (*SigningPayloadResponse, error) {
	out := new(SigningPayloadResponse)
	err := grpc.Invoke(ctx, "/auth.AuthService/SignPayload", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) SignBasic(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SigningResponse, error) {
	out := new(SigningResponse)
	err := grpc.Invoke(ctx, "/auth.AuthService/SignBasic", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) EntityInfo(ctx context.Context, in *JWTEnc, opts ...grpc.CallOption) (*entity.Entity, error) {
	out := new(entity.Entity)
	err := grpc.Invoke(ctx, "/auth.AuthService/EntityInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) WellKnown(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*WellKnownResponse, error) {
	out := new(WellKnownResponse)
	err := grpc.Invoke(ctx, "/auth.AuthService/WellKnown", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) JWKs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*JWKsResponse, error) {
	out := new(JWKsResponse)
	err := grpc.Invoke(ctx, "/auth.AuthService/JWKs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthService service

type AuthServiceServer interface {
	Authorize(context.Context, *AuthorizationRequest) (*AuthorizationResponse, error)
	AuthorizeAndSign(context.Context, *AuthorizationRequest) (*AuthorizationSigningResponse, error)
	Sign(context.Context, *SigningRequest) (*SigningResponse, error)
	SignPayload(context.Context, *SigningPayloadRequest) (*SigningPayloadResponse, error)
	SignBasic(context.Context, *Empty) (*SigningResponse, error)
	EntityInfo(context.Context, *JWTEnc) (*entity.Entity, error)
	WellKnown(context.Context, *Empty) (*WellKnownResponse, error)
	JWKs(context.Context, *Empty) (*JWKsResponse, error)
}

func RegisterAuthServiceServer(s *grpc.Server, srv AuthServiceServer) {
	s.RegisterService(&_AuthService_serviceDesc, srv)
}

func _AuthService_Authorize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Authorize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/Authorize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Authorize(ctx, req.(*AuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AuthorizeAndSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AuthorizeAndSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/AuthorizeAndSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AuthorizeAndSign(ctx, req.(*AuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_Sign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SigningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Sign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/Sign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Sign(ctx, req.(*SigningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_SignPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SigningPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).SignPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/SignPayload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).SignPayload(ctx, req.(*SigningPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_SignBasic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).SignBasic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/SignBasic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).SignBasic(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_EntityInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JWTEnc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).EntityInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/EntityInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).EntityInfo(ctx, req.(*JWTEnc))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_WellKnown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).WellKnown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/WellKnown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).WellKnown(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_JWKs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).JWKs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.AuthService/JWKs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).JWKs(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "auth.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authorize",
			Handler:    _AuthService_Authorize_Handler,
		},
		{
			MethodName: "AuthorizeAndSign",
			Handler:    _AuthService_AuthorizeAndSign_Handler,
		},
		{
			MethodName: "Sign",
			Handler:    _AuthService_Sign_Handler,
		},
		{
			MethodName: "SignPayload",
			Handler:    _AuthService_SignPayload_Handler,
		},
		{
			MethodName: "SignBasic",
			Handler:    _AuthService_SignBasic_Handler,
		},
		{
			MethodName: "EntityInfo",
			Handler:    _AuthService_EntityInfo_Handler,
		},
		{
			MethodName: "WellKnown",
			Handler:    _AuthService_WellKnown_Handler,
		},
		{
			MethodName: "JWKs",
			Handler:    _AuthService_JWKs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/auth.proto",
}

func init() { proto.RegisterFile("api/auth.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 934 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xcb, 0x6e, 0xdb, 0x46,
	0x14, 0x05, 0xad, 0x87, 0xc3, 0x2b, 0xd5, 0x96, 0x07, 0xb2, 0x42, 0x30, 0x42, 0xa0, 0x4e, 0x9b,
	0x44, 0x08, 0x10, 0xb2, 0x75, 0xbb, 0x08, 0x02, 0x74, 0xa1, 0xa4, 0x82, 0x13, 0xbb, 0x0b, 0x95,
	0x71, 0x6b, 0xb4, 0x5d, 0x51, 0xd4, 0x84, 0xa4, 0x45, 0x71, 0x18, 0xce, 0x28, 0xaa, 0xba, 0xec,
	0xa6, 0x1f, 0xd0, 0x6f, 0x28, 0xfa, 0x1d, 0xfd, 0x86, 0x7e, 0x40, 0x37, 0xfd, 0x90, 0x62, 0x1e,
	0xa2, 0xa8, 0x87, 0x83, 0x66, 0xe5, 0xb9, 0x73, 0xcf, 0x3d, 0xf7, 0x31, 0xe7, 0x52, 0x86, 0x23,
	0x3f, 0x8b, 0x5d, 0x7f, 0xce, 0x23, 0x27, 0xcb, 0x29, 0xa7, 0xa8, 0x2a, 0xce, 0x76, 0x37, 0xa4,
	0x34, 0x4c, 0x88, 0x2b, 0x9d, 0x69, 0x4a, 0xb9, 0xcf, 0x63, 0x9a, 0x32, 0x85, 0xb1, 0x5b, 0xe2,
	0x9a, 0xa4, 0x3c, 0xe6, 0x4b, 0x75, 0x83, 0xff, 0x39, 0x80, 0xf6, 0x60, 0xce, 0x23, 0x9a, 0xc7,
	0xbf, 0x48, 0xa8, 0x47, 0xde, 0xce, 0x09, 0xe3, 0xe8, 0x01, 0x54, 0x23, 0xce, 0x33, 0xcb, 0xe8,
	0x19, 0xfd, 0xc6, 0xd9, 0x89, 0x23, 0x33, 0xbd, 0xbc, 0xba, 0x1a, 0x69, 0x80, 0x27, 0xdd, 0x02,
	0x16, 0xe6, 0x59, 0x60, 0x1d, 0x94, 0x61, 0xe7, 0xde, 0xe8, 0x45, 0x01, 0x13, 0x6e, 0x34, 0x80,
	0xc3, 0x88, 0xf8, 0x13, 0x92, 0x33, 0xab, 0xd2, 0xab, 0xf4, 0x1b, 0x67, 0x8f, 0x14, 0x72, 0x5f,
	0x6a, 0xe7, 0xa5, 0x42, 0x0e, 0x53, 0x9e, 0x2f, 0xbd, 0x55, 0x1c, 0xba, 0x0f, 0x90, 0x93, 0x19,
	0xe5, 0x64, 0x30, 0x99, 0xe4, 0x56, 0xb5, 0x67, 0xf4, 0x4d, 0xaf, 0x74, 0x83, 0x10, 0x54, 0x23,
	0xca, 0xb8, 0x55, 0x93, 0x1e, 0x79, 0x46, 0x5d, 0x30, 0x73, 0x45, 0xfa, 0xea, 0x6b, 0xab, 0x2e,
	0x1d, 0xeb, 0x0b, 0xd4, 0x81, 0x7a, 0x10, 0xf9, 0x79, 0x48, 0xac, 0xc3, 0x9e, 0xd1, 0xbf, 0xe3,
	0x69, 0xcb, 0xfe, 0x06, 0x9a, 0xe5, 0x12, 0x50, 0x0b, 0x2a, 0x53, 0xb2, 0x94, 0x93, 0x30, 0x3d,
	0x71, 0x44, 0x0f, 0xa1, 0xf6, 0xce, 0x4f, 0xe6, 0x44, 0xb7, 0xdd, 0xd2, 0xd3, 0x91, 0x41, 0xdf,
	0xfb, 0x09, 0xf3, 0x94, 0xfb, 0xd9, 0xc1, 0x53, 0x03, 0x7f, 0x0a, 0xb0, 0x76, 0x88, 0x9c, 0xd2,
	0xc5, 0x2c, 0xa3, 0x57, 0xe9, 0x9b, 0x9e, 0xb6, 0xf0, 0x9f, 0x06, 0x34, 0x4a, 0xd3, 0x15, 0xdd,
	0x64, 0x3e, 0x8f, 0x74, 0x52, 0x79, 0x16, 0xb1, 0x7e, 0x20, 0x06, 0x25, 0xd3, 0x9a, 0x9e, 0xb6,
	0xd0, 0x19, 0xd4, 0xde, 0xce, 0x49, 0xbe, 0xd4, 0xa3, 0xed, 0xee, 0xbc, 0x95, 0xf3, 0xad, 0x70,
	0xab, 0x79, 0x2a, 0xa8, 0xfd, 0x14, 0x60, 0x7d, 0xb9, 0xa7, 0xc3, 0x76, 0xb9, 0x43, 0xb3, 0xdc,
	0xcf, 0x5f, 0x06, 0x34, 0x4a, 0x0f, 0x8c, 0x2c, 0x38, 0x64, 0x24, 0x7f, 0x17, 0x07, 0x44, 0xc7,
	0xaf, 0x4c, 0x51, 0xef, 0x8c, 0xf0, 0x88, 0x4e, 0x56, 0xf5, 0x2a, 0x0b, 0x0d, 0x00, 0x32, 0x3f,
	0xf7, 0x67, 0x84, 0xaf, 0xf5, 0xf0, 0xf1, 0x8e, 0x72, 0x9c, 0x51, 0x81, 0x51, 0x95, 0x97, 0x82,
	0xec, 0xaf, 0xe0, 0x78, 0xcb, 0xfd, 0x41, 0x3d, 0xfc, 0x00, 0xa7, 0x5b, 0xca, 0x63, 0x19, 0x4d,
	0x19, 0x11, 0xcd, 0xf8, 0x49, 0x42, 0x17, 0x64, 0x22, 0x89, 0xee, 0x78, 0x2b, 0x13, 0x3d, 0x84,
	0xba, 0x5a, 0x1c, 0xfd, 0xe6, 0x47, 0x8e, 0xde, 0xa3, 0xa1, 0xfc, 0xe3, 0x69, 0x2f, 0xbe, 0x80,
	0xee, 0x06, 0xf5, 0xeb, 0x38, 0x4c, 0xe3, 0x34, 0xfc, 0x1f, 0x19, 0x5a, 0x50, 0xb9, 0x59, 0x70,
	0x5d, 0xac, 0x38, 0x62, 0x0c, 0x47, 0x45, 0xb8, 0x1a, 0xb6, 0xc6, 0x18, 0x6b, 0xcc, 0x27, 0x70,
	0xbc, 0x9d, 0x62, 0x17, 0xf4, 0x39, 0x9c, 0x6a, 0xd0, 0xc8, 0x5f, 0x26, 0xd4, 0x9f, 0x94, 0x1e,
	0x2f, 0x53, 0x37, 0xab, 0xc7, 0xd3, 0x26, 0x7e, 0x0c, 0x9d, 0xed, 0x90, 0x5b, 0xe9, 0x87, 0x70,
	0x72, 0x4d, 0x92, 0xe4, 0x32, 0xa5, 0x8b, 0xf5, 0x28, 0x3b, 0x50, 0x8f, 0x19, 0x9b, 0x93, 0x5c,
	0x23, 0xb5, 0x25, 0x52, 0xde, 0x2c, 0xa6, 0xec, 0xbb, 0x3c, 0xd6, 0xad, 0xae, 0x4c, 0xfc, 0x9b,
	0x01, 0xcd, 0x8b, 0xeb, 0x4b, 0x56, 0x50, 0x7c, 0x06, 0xd5, 0x29, 0x59, 0xaa, 0x55, 0x29, 0x74,
	0x5d, 0x46, 0x38, 0x97, 0x64, 0xa9, 0xd5, 0x21, 0x91, 0xf6, 0x10, 0xcc, 0xe2, 0x6a, 0x8f, 0x22,
	0xf0, 0xe6, 0xde, 0x36, 0x0b, 0xc6, 0x61, 0x1a, 0x94, 0xf5, 0xf1, 0x25, 0xd4, 0x2f, 0xae, 0xaf,
	0x86, 0x69, 0xb0, 0xdb, 0xac, 0xa8, 0x9f, 0xfc, 0x9c, 0xc5, 0x39, 0x61, 0x92, 0xa5, 0xe2, 0xad,
	0x4c, 0x15, 0x75, 0x59, 0x44, 0x4d, 0xd7, 0x51, 0xd3, 0xf7, 0x44, 0x1d, 0x42, 0x6d, 0x38, 0xcb,
	0xf8, 0xf2, 0xec, 0x8f, 0x1a, 0x34, 0x84, 0x74, 0x5e, 0xeb, 0xf5, 0xf9, 0x09, 0xcc, 0x95, 0x92,
	0x08, 0xb2, 0x6f, 0xff, 0x5e, 0xda, 0xf7, 0xf6, 0xfa, 0xd4, 0x84, 0xf0, 0xe9, 0xaf, 0x7f, 0xff,
	0xfb, 0xfb, 0xc1, 0x31, 0x06, 0xf9, 0x5b, 0x21, 0xc9, 0x9e, 0x19, 0x8f, 0x51, 0x0a, 0xad, 0x82,
	0x7c, 0x90, 0x4e, 0xc4, 0x53, 0xbf, 0x37, 0x07, 0xde, 0xe3, 0xdb, 0xd2, 0x1d, 0xb6, 0x65, 0xaa,
	0x36, 0x3e, 0x5e, 0xa7, 0x72, 0x59, 0x1c, 0xa6, 0x22, 0xdf, 0x10, 0xaa, 0x32, 0x47, 0x5b, 0xf1,
	0x6c, 0xca, 0xda, 0x3e, 0xdd, 0xba, 0xd5, 0x84, 0x2d, 0x49, 0x08, 0xb8, 0x56, 0xd0, 0x8c, 0xa1,
	0x21, 0x40, 0x5a, 0x92, 0xe8, 0xde, 0x46, 0xdc, 0xa6, 0xb6, 0xed, 0xee, 0x7e, 0xa7, 0xe6, 0xb6,
	0x24, 0x37, 0xc2, 0x1f, 0x49, 0x6e, 0x57, 0xcb, 0x5e, 0xe4, 0x38, 0x07, 0x53, 0xc4, 0x3c, 0xf7,
	0x59, 0x1c, 0xa0, 0x86, 0x22, 0x91, 0x2f, 0x74, 0x5b, 0x99, 0x1d, 0x49, 0xd5, 0xc2, 0x0d, 0x45,
	0x35, 0x16, 0x81, 0x82, 0xe8, 0x05, 0x80, 0xfa, 0x38, 0xbc, 0x4a, 0xdf, 0x50, 0x54, 0x88, 0x4d,
	0xe8, 0xca, 0xde, 0xfa, 0x7c, 0xe0, 0xbb, 0x92, 0xe3, 0x04, 0x37, 0xf5, 0xcf, 0xf3, 0x93, 0x38,
	0x7d, 0x43, 0x75, 0x35, 0xc5, 0x6e, 0x6d, 0x56, 0x73, 0x57, 0x19, 0x3b, 0x9b, 0x87, 0xdb, 0x92,
	0xeb, 0x08, 0x35, 0x5d, 0x67, 0x41, 0x92, 0xe4, 0xc9, 0x54, 0xc6, 0x9e, 0x43, 0x55, 0xac, 0xce,
	0x26, 0x07, 0xda, 0xdd, 0x29, 0x7c, 0x5f, 0x86, 0x5b, 0xa8, 0x53, 0x0e, 0x77, 0xc5, 0x92, 0x3a,
	0x37, 0x8c, 0xa6, 0xcf, 0x1f, 0xfd, 0xf8, 0x20, 0x8c, 0x79, 0x34, 0x1f, 0x3b, 0x01, 0x9d, 0xb9,
	0xd3, 0xf9, 0x98, 0x04, 0x34, 0xcf, 0xdc, 0x80, 0xe6, 0x7e, 0xe2, 0xb2, 0xc9, 0xd4, 0x0d, 0xa9,
	0x14, 0xc0, 0xb8, 0x2e, 0xff, 0xc5, 0xf8, 0xe2, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x94, 0x9a,
	0x2f, 0x8b, 0xaa, 0x08, 0x00, 0x00,
}
