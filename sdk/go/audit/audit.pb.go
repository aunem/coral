// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/audit.proto

/*
Package audit is a generated protocol buffer package.

It is generated from these files:
	api/audit.proto

It has these top-level messages:
	AuditRecord
	AuditRecords
	Authentication
	Response
	Billing
	RetireQuery
	IDQuery
	ListQuery
*/
package audit

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import entity "github.com/aunem/coral/sdk/go/entity"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AuditRecord struct {
	Id             string          `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	CreatedTime    int64           `protobuf:"varint,2,opt,name=createdTime" json:"createdTime,omitempty"`
	UpdateTime     int64           `protobuf:"varint,3,opt,name=updateTime" json:"updateTime,omitempty"`
	RequestID      string          `protobuf:"bytes,4,opt,name=requestID" json:"requestID,omitempty"`
	Entity         *entity.Entity  `protobuf:"bytes,5,opt,name=entity" json:"entity,omitempty"`
	Authentication *Authentication `protobuf:"bytes,6,opt,name=authentication" json:"authentication,omitempty"`
	Response       *Response       `protobuf:"bytes,7,opt,name=response" json:"response,omitempty"`
	Billing        *Billing        `protobuf:"bytes,8,opt,name=billing" json:"billing,omitempty"`
}

func (m *AuditRecord) Reset()                    { *m = AuditRecord{} }
func (m *AuditRecord) String() string            { return proto.CompactTextString(m) }
func (*AuditRecord) ProtoMessage()               {}
func (*AuditRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AuditRecord) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AuditRecord) GetCreatedTime() int64 {
	if m != nil {
		return m.CreatedTime
	}
	return 0
}

func (m *AuditRecord) GetUpdateTime() int64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

func (m *AuditRecord) GetRequestID() string {
	if m != nil {
		return m.RequestID
	}
	return ""
}

func (m *AuditRecord) GetEntity() *entity.Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (m *AuditRecord) GetAuthentication() *Authentication {
	if m != nil {
		return m.Authentication
	}
	return nil
}

func (m *AuditRecord) GetResponse() *Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *AuditRecord) GetBilling() *Billing {
	if m != nil {
		return m.Billing
	}
	return nil
}

type AuditRecords struct {
	AuditRecords []*AuditRecord `protobuf:"bytes,1,rep,name=auditRecords" json:"auditRecords,omitempty"`
}

func (m *AuditRecords) Reset()                    { *m = AuditRecords{} }
func (m *AuditRecords) String() string            { return proto.CompactTextString(m) }
func (*AuditRecords) ProtoMessage()               {}
func (*AuditRecords) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AuditRecords) GetAuditRecords() []*AuditRecord {
	if m != nil {
		return m.AuditRecords
	}
	return nil
}

type Authentication struct {
	Type   string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Token  string `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
	Issuer string `protobuf:"bytes,3,opt,name=issuer" json:"issuer,omitempty"`
}

func (m *Authentication) Reset()                    { *m = Authentication{} }
func (m *Authentication) String() string            { return proto.CompactTextString(m) }
func (*Authentication) ProtoMessage()               {}
func (*Authentication) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Authentication) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Authentication) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Authentication) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

type Response struct {
	Code int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Body string `protobuf:"bytes,2,opt,name=body" json:"body,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Response) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Response) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

type Billing struct {
	Billed  bool   `protobuf:"varint,1,opt,name=billed" json:"billed,omitempty"`
	Account string `protobuf:"bytes,2,opt,name=account" json:"account,omitempty"`
	Ammount string `protobuf:"bytes,3,opt,name=ammount" json:"ammount,omitempty"`
}

func (m *Billing) Reset()                    { *m = Billing{} }
func (m *Billing) String() string            { return proto.CompactTextString(m) }
func (*Billing) ProtoMessage()               {}
func (*Billing) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Billing) GetBilled() bool {
	if m != nil {
		return m.Billed
	}
	return false
}

func (m *Billing) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *Billing) GetAmmount() string {
	if m != nil {
		return m.Ammount
	}
	return ""
}

type RetireQuery struct {
	DaysBack int32 `protobuf:"varint,1,opt,name=daysBack" json:"daysBack,omitempty"`
}

func (m *RetireQuery) Reset()                    { *m = RetireQuery{} }
func (m *RetireQuery) String() string            { return proto.CompactTextString(m) }
func (*RetireQuery) ProtoMessage()               {}
func (*RetireQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RetireQuery) GetDaysBack() int32 {
	if m != nil {
		return m.DaysBack
	}
	return 0
}

type IDQuery struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *IDQuery) Reset()                    { *m = IDQuery{} }
func (m *IDQuery) String() string            { return proto.CompactTextString(m) }
func (*IDQuery) ProtoMessage()               {}
func (*IDQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *IDQuery) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *IDQuery) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ListQuery struct {
	EntityAttributes map[string]string `protobuf:"bytes,1,rep,name=entityAttributes" json:"entityAttributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ListQuery) Reset()                    { *m = ListQuery{} }
func (m *ListQuery) String() string            { return proto.CompactTextString(m) }
func (*ListQuery) ProtoMessage()               {}
func (*ListQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ListQuery) GetEntityAttributes() map[string]string {
	if m != nil {
		return m.EntityAttributes
	}
	return nil
}

func init() {
	proto.RegisterType((*AuditRecord)(nil), "audit.AuditRecord")
	proto.RegisterType((*AuditRecords)(nil), "audit.AuditRecords")
	proto.RegisterType((*Authentication)(nil), "audit.Authentication")
	proto.RegisterType((*Response)(nil), "audit.Response")
	proto.RegisterType((*Billing)(nil), "audit.Billing")
	proto.RegisterType((*RetireQuery)(nil), "audit.RetireQuery")
	proto.RegisterType((*IDQuery)(nil), "audit.IDQuery")
	proto.RegisterType((*ListQuery)(nil), "audit.ListQuery")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AuditService service

type AuditServiceClient interface {
	GetRecord(ctx context.Context, in *IDQuery, opts ...grpc.CallOption) (*AuditRecord, error)
	ListRecords(ctx context.Context, in *ListQuery, opts ...grpc.CallOption) (*AuditRecords, error)
	CreateRecord(ctx context.Context, in *AuditRecord, opts ...grpc.CallOption) (*entity.Empty, error)
	RetireRecords(ctx context.Context, in *RetireQuery, opts ...grpc.CallOption) (*entity.Empty, error)
}

type auditServiceClient struct {
	cc *grpc.ClientConn
}

func NewAuditServiceClient(cc *grpc.ClientConn) AuditServiceClient {
	return &auditServiceClient{cc}
}

func (c *auditServiceClient) GetRecord(ctx context.Context, in *IDQuery, opts ...grpc.CallOption) (*AuditRecord, error) {
	out := new(AuditRecord)
	err := grpc.Invoke(ctx, "/audit.AuditService/GetRecord", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditServiceClient) ListRecords(ctx context.Context, in *ListQuery, opts ...grpc.CallOption) (*AuditRecords, error) {
	out := new(AuditRecords)
	err := grpc.Invoke(ctx, "/audit.AuditService/ListRecords", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditServiceClient) CreateRecord(ctx context.Context, in *AuditRecord, opts ...grpc.CallOption) (*entity.Empty, error) {
	out := new(entity.Empty)
	err := grpc.Invoke(ctx, "/audit.AuditService/CreateRecord", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditServiceClient) RetireRecords(ctx context.Context, in *RetireQuery, opts ...grpc.CallOption) (*entity.Empty, error) {
	out := new(entity.Empty)
	err := grpc.Invoke(ctx, "/audit.AuditService/RetireRecords", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuditService service

type AuditServiceServer interface {
	GetRecord(context.Context, *IDQuery) (*AuditRecord, error)
	ListRecords(context.Context, *ListQuery) (*AuditRecords, error)
	CreateRecord(context.Context, *AuditRecord) (*entity.Empty, error)
	RetireRecords(context.Context, *RetireQuery) (*entity.Empty, error)
}

func RegisterAuditServiceServer(s *grpc.Server, srv AuditServiceServer) {
	s.RegisterService(&_AuditService_serviceDesc, srv)
}

func _AuditService_GetRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditServiceServer).GetRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/audit.AuditService/GetRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditServiceServer).GetRecord(ctx, req.(*IDQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditService_ListRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditServiceServer).ListRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/audit.AuditService/ListRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditServiceServer).ListRecords(ctx, req.(*ListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditService_CreateRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuditRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditServiceServer).CreateRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/audit.AuditService/CreateRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditServiceServer).CreateRecord(ctx, req.(*AuditRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditService_RetireRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetireQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditServiceServer).RetireRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/audit.AuditService/RetireRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditServiceServer).RetireRecords(ctx, req.(*RetireQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuditService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "audit.AuditService",
	HandlerType: (*AuditServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRecord",
			Handler:    _AuditService_GetRecord_Handler,
		},
		{
			MethodName: "ListRecords",
			Handler:    _AuditService_ListRecords_Handler,
		},
		{
			MethodName: "CreateRecord",
			Handler:    _AuditService_CreateRecord_Handler,
		},
		{
			MethodName: "RetireRecords",
			Handler:    _AuditService_RetireRecords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/audit.proto",
}

func init() { proto.RegisterFile("api/audit.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 659 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x54, 0xdd, 0x6a, 0xdb, 0x4a,
	0x10, 0x46, 0x72, 0xfc, 0xa3, 0xb1, 0xe3, 0x98, 0x49, 0x72, 0xd0, 0x11, 0xe1, 0x60, 0x74, 0x38,
	0xc1, 0x27, 0xa5, 0x16, 0xb8, 0x50, 0x4a, 0xa0, 0x17, 0xf9, 0x71, 0x4a, 0xa0, 0xbd, 0xe8, 0xb6,
	0xbd, 0xe9, 0xdd, 0x5a, 0x5a, 0x9c, 0xc5, 0xb6, 0xd6, 0x5d, 0xad, 0x02, 0xa2, 0xf4, 0xa6, 0xaf,
	0xd0, 0x57, 0xe8, 0x1b, 0xf4, 0xb2, 0x8f, 0xd1, 0x57, 0xe8, 0x83, 0x14, 0xed, 0xae, 0x14, 0xc7,
	0xc9, 0x95, 0xf6, 0x9b, 0xf9, 0xe6, 0xe3, 0x9b, 0x9d, 0x59, 0xc1, 0x1e, 0x5d, 0xf3, 0x88, 0xe6,
	0x09, 0x57, 0xe3, 0xb5, 0x14, 0x4a, 0x60, 0x53, 0x83, 0xe0, 0x68, 0x2e, 0xc4, 0x7c, 0xc9, 0x22,
	0x9d, 0x4e, 0x53, 0xa1, 0xa8, 0xe2, 0x22, 0xcd, 0x0c, 0x29, 0x18, 0x94, 0x61, 0x96, 0x2a, 0xae,
	0x0a, 0x13, 0x09, 0x7f, 0xba, 0xd0, 0x3d, 0x2b, 0x2b, 0x09, 0x8b, 0x85, 0x4c, 0xb0, 0x0f, 0x2e,
	0x4f, 0x7c, 0x67, 0xe8, 0x8c, 0x3c, 0xe2, 0xf2, 0x04, 0x87, 0xd0, 0x8d, 0x25, 0xa3, 0x8a, 0x25,
	0xef, 0xf9, 0x8a, 0xf9, 0xee, 0xd0, 0x19, 0x35, 0xc8, 0x66, 0x08, 0xff, 0x01, 0xc8, 0xd7, 0x09,
	0x55, 0x4c, 0x13, 0x1a, 0x9a, 0xb0, 0x11, 0xc1, 0x23, 0xf0, 0x24, 0xfb, 0x94, 0xb3, 0x4c, 0x5d,
	0x5f, 0xfa, 0x3b, 0x5a, 0xf8, 0x2e, 0x80, 0xc7, 0xd0, 0x32, 0x7e, 0xfc, 0xe6, 0xd0, 0x19, 0x75,
	0x27, 0xfd, 0xb1, 0xb5, 0x37, 0xd5, 0x1f, 0x62, 0xb3, 0xf8, 0x12, 0xfa, 0x34, 0x57, 0x37, 0x25,
	0x8a, 0x75, 0x4b, 0x7e, 0x4b, 0xf3, 0x0f, 0xc7, 0xe6, 0x12, 0xce, 0xee, 0x25, 0xc9, 0x16, 0x19,
	0x9f, 0x40, 0x47, 0xb2, 0x6c, 0x2d, 0xd2, 0x8c, 0xf9, 0x6d, 0x5d, 0xb8, 0x67, 0x0b, 0x89, 0x0d,
	0x93, 0x9a, 0x80, 0x23, 0x68, 0xcf, 0xf8, 0x72, 0xc9, 0xd3, 0xb9, 0xdf, 0xb1, 0xa6, 0x0c, 0xf7,
	0xdc, 0x44, 0x49, 0x95, 0x0e, 0xaf, 0xa0, 0xb7, 0x71, 0x79, 0x19, 0x3e, 0x87, 0x1e, 0xdd, 0xc0,
	0xbe, 0x33, 0x6c, 0x8c, 0xba, 0x13, 0xac, 0x3d, 0xd6, 0x29, 0x72, 0x8f, 0x17, 0x12, 0xe8, 0xdf,
	0x6f, 0x00, 0x11, 0x76, 0x54, 0xb1, 0x66, 0x76, 0x12, 0xfa, 0x8c, 0x07, 0xd0, 0x54, 0x62, 0xc1,
	0x52, 0x3d, 0x05, 0x8f, 0x18, 0x80, 0x7f, 0x41, 0x8b, 0x67, 0x59, 0xce, 0xa4, 0xbe, 0x7b, 0x8f,
	0x58, 0x14, 0x4e, 0xa0, 0x53, 0xf5, 0x56, 0xaa, 0xc5, 0x22, 0x31, 0x6a, 0x4d, 0xa2, 0xcf, 0x65,
	0x6c, 0x26, 0x92, 0xc2, 0x8a, 0xe9, 0x73, 0xf8, 0x01, 0xda, 0xb6, 0xc7, 0x52, 0xb6, 0xec, 0x92,
	0x99, 0x65, 0xe8, 0x10, 0x8b, 0xd0, 0x87, 0x36, 0x8d, 0x63, 0x91, 0xa7, 0xca, 0x56, 0x56, 0x50,
	0x67, 0x56, 0x2b, 0x9d, 0x69, 0xd8, 0x8c, 0x81, 0xe1, 0xff, 0xd0, 0x25, 0x4c, 0x71, 0xc9, 0xde,
	0xe6, 0x4c, 0x16, 0x18, 0x40, 0x27, 0xa1, 0x45, 0x76, 0x4e, 0xe3, 0x85, 0x75, 0x54, 0xe3, 0xf0,
	0x29, 0xb4, 0xaf, 0x2f, 0x0d, 0x6d, 0x7b, 0x15, 0x11, 0x76, 0x52, 0x6a, 0x77, 0xd0, 0x23, 0xfa,
	0x1c, 0x7e, 0x77, 0xc0, 0x7b, 0xcd, 0x33, 0x65, 0x2a, 0x08, 0x0c, 0xcc, 0xba, 0x9c, 0x29, 0x25,
	0xf9, 0x2c, 0x57, 0xac, 0x1a, 0xc1, 0xb1, 0x1d, 0x41, 0xcd, 0xb5, 0xfb, 0x75, 0x47, 0x9c, 0xa6,
	0x4a, 0x16, 0xe4, 0x41, 0x7d, 0x70, 0x01, 0x87, 0x8f, 0x52, 0x71, 0x00, 0x8d, 0x05, 0x2b, 0xac,
	0xbf, 0xf2, 0x58, 0xce, 0xe7, 0x96, 0x2e, 0xf3, 0xca, 0xa1, 0x01, 0xa7, 0xee, 0x0b, 0x67, 0xf2,
	0xc3, 0xb5, 0x8b, 0xf2, 0x8e, 0xc9, 0x5b, 0x1e, 0x33, 0x9c, 0x82, 0xf7, 0x8a, 0xd5, 0x6f, 0xce,
	0x9a, 0xb3, 0x8d, 0x07, 0x8f, 0xec, 0x4b, 0x78, 0xf0, 0xf5, 0xd7, 0xef, 0x6f, 0x6e, 0x1f, 0x7b,
	0x91, 0xd4, 0x81, 0xe8, 0x33, 0x4f, 0xbe, 0xe0, 0x15, 0x74, 0xcb, 0x8e, 0xaa, 0xf5, 0x1b, 0x6c,
	0x77, 0x19, 0xec, 0x3f, 0x94, 0xca, 0xc2, 0x81, 0xd6, 0x02, 0xec, 0x58, 0xad, 0x0c, 0xa7, 0xd0,
	0xbb, 0xd0, 0x4f, 0xda, 0x3a, 0x7a, 0xc4, 0x41, 0xb0, 0x5b, 0xbf, 0xcc, 0xd5, 0x5a, 0x15, 0x21,
	0x6a, 0x91, 0x5e, 0xd8, 0xb6, 0x22, 0xa7, 0xce, 0x09, 0xbe, 0x81, 0x5d, 0x33, 0xe7, 0xca, 0x10,
	0xd6, 0x8f, 0xac, 0x9e, 0xfe, 0xb6, 0xce, 0xdf, 0x5a, 0x67, 0x3f, 0xec, 0x57, 0x8d, 0x49, 0xcd,
	0x3d, 0x75, 0x4e, 0xce, 0xff, 0xfb, 0xf8, 0xef, 0x9c, 0xab, 0x9b, 0x7c, 0x36, 0x8e, 0xc5, 0x2a,
	0xa2, 0x79, 0xca, 0x56, 0x51, 0x2c, 0x24, 0x5d, 0x46, 0x59, 0xb2, 0x88, 0xe6, 0xc2, 0xfc, 0xff,
	0x66, 0x2d, 0xfd, 0x27, 0x7b, 0xf6, 0x27, 0x00, 0x00, 0xff, 0xff, 0x9d, 0xbb, 0x43, 0x02, 0x13,
	0x05, 0x00, 0x00,
}
