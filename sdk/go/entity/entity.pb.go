// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/entity.proto

/*
Package entity is a generated protocol buffer package.

It is generated from these files:
	api/entity.proto

It has these top-level messages:
	Entity
	EntityAuth
	BasicAuth
	JWTAuth
	EntityBilling
	IDQuery
	Query
	Entities
	Empty
*/
package entity

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Entity
type Entity struct {
	Id             string            `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	CreatedTime    int64             `protobuf:"varint,2,opt,name=createdTime" json:"createdTime,omitempty"`
	UpdateTime     int64             `protobuf:"varint,3,opt,name=updateTime" json:"updateTime,omitempty"`
	Attributes     map[string]string `protobuf:"bytes,4,rep,name=attributes" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Authentication *EntityAuth       `protobuf:"bytes,5,opt,name=authentication" json:"authentication,omitempty"`
	Billing        []*EntityBilling  `protobuf:"bytes,6,rep,name=billing" json:"billing,omitempty"`
}

func (m *Entity) Reset()                    { *m = Entity{} }
func (m *Entity) String() string            { return proto.CompactTextString(m) }
func (*Entity) ProtoMessage()               {}
func (*Entity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Entity) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Entity) GetCreatedTime() int64 {
	if m != nil {
		return m.CreatedTime
	}
	return 0
}

func (m *Entity) GetUpdateTime() int64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

func (m *Entity) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Entity) GetAuthentication() *EntityAuth {
	if m != nil {
		return m.Authentication
	}
	return nil
}

func (m *Entity) GetBilling() []*EntityBilling {
	if m != nil {
		return m.Billing
	}
	return nil
}

type EntityAuth struct {
	Basic []*BasicAuth `protobuf:"bytes,1,rep,name=basic" json:"basic,omitempty"`
	Jwt   []*JWTAuth   `protobuf:"bytes,2,rep,name=jwt" json:"jwt,omitempty"`
}

func (m *EntityAuth) Reset()                    { *m = EntityAuth{} }
func (m *EntityAuth) String() string            { return proto.CompactTextString(m) }
func (*EntityAuth) ProtoMessage()               {}
func (*EntityAuth) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *EntityAuth) GetBasic() []*BasicAuth {
	if m != nil {
		return m.Basic
	}
	return nil
}

func (m *EntityAuth) GetJwt() []*JWTAuth {
	if m != nil {
		return m.Jwt
	}
	return nil
}

type BasicAuth struct {
	Id        string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Secret    string   `protobuf:"bytes,2,opt,name=secret" json:"secret,omitempty"`
	Tags      []string `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty"`
	Timestamp int64    `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *BasicAuth) Reset()                    { *m = BasicAuth{} }
func (m *BasicAuth) String() string            { return proto.CompactTextString(m) }
func (*BasicAuth) ProtoMessage()               {}
func (*BasicAuth) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *BasicAuth) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BasicAuth) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *BasicAuth) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *BasicAuth) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type JWTAuth struct {
	Name   string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Claims map[string]string `protobuf:"bytes,2,rep,name=claims" json:"claims,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *JWTAuth) Reset()                    { *m = JWTAuth{} }
func (m *JWTAuth) String() string            { return proto.CompactTextString(m) }
func (*JWTAuth) ProtoMessage()               {}
func (*JWTAuth) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *JWTAuth) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *JWTAuth) GetClaims() map[string]string {
	if m != nil {
		return m.Claims
	}
	return nil
}

type EntityBilling struct {
	Account string `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	Id      string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (m *EntityBilling) Reset()                    { *m = EntityBilling{} }
func (m *EntityBilling) String() string            { return proto.CompactTextString(m) }
func (*EntityBilling) ProtoMessage()               {}
func (*EntityBilling) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *EntityBilling) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *EntityBilling) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type IDQuery struct {
	Id     string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	KeyId  string   `protobuf:"bytes,2,opt,name=keyId" json:"keyId,omitempty"`
	Claims *JWTAuth `protobuf:"bytes,3,opt,name=claims" json:"claims,omitempty"`
}

func (m *IDQuery) Reset()                    { *m = IDQuery{} }
func (m *IDQuery) String() string            { return proto.CompactTextString(m) }
func (*IDQuery) ProtoMessage()               {}
func (*IDQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *IDQuery) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *IDQuery) GetKeyId() string {
	if m != nil {
		return m.KeyId
	}
	return ""
}

func (m *IDQuery) GetClaims() *JWTAuth {
	if m != nil {
		return m.Claims
	}
	return nil
}

type Query struct {
	Id         string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Attributes []string `protobuf:"bytes,2,rep,name=attributes" json:"attributes,omitempty"`
}

func (m *Query) Reset()                    { *m = Query{} }
func (m *Query) String() string            { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()               {}
func (*Query) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Query) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Query) GetAttributes() []string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type Entities struct {
	Entities []*Entity `protobuf:"bytes,1,rep,name=entities" json:"entities,omitempty"`
}

func (m *Entities) Reset()                    { *m = Entities{} }
func (m *Entities) String() string            { return proto.CompactTextString(m) }
func (*Entities) ProtoMessage()               {}
func (*Entities) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Entities) GetEntities() []*Entity {
	if m != nil {
		return m.Entities
	}
	return nil
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func init() {
	proto.RegisterType((*Entity)(nil), "entity.Entity")
	proto.RegisterType((*EntityAuth)(nil), "entity.EntityAuth")
	proto.RegisterType((*BasicAuth)(nil), "entity.BasicAuth")
	proto.RegisterType((*JWTAuth)(nil), "entity.JWTAuth")
	proto.RegisterType((*EntityBilling)(nil), "entity.EntityBilling")
	proto.RegisterType((*IDQuery)(nil), "entity.IDQuery")
	proto.RegisterType((*Query)(nil), "entity.Query")
	proto.RegisterType((*Entities)(nil), "entity.Entities")
	proto.RegisterType((*Empty)(nil), "entity.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EntityService service

type EntityServiceClient interface {
	GetEntity(ctx context.Context, in *IDQuery, opts ...grpc.CallOption) (*Entity, error)
	ListEntities(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Entities, error)
	CreateEntity(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Entity, error)
	UpdateEntity(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Entity, error)
	PatchEntity(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Entity, error)
	DeleteEntity(ctx context.Context, in *IDQuery, opts ...grpc.CallOption) (*Empty, error)
}

type entityServiceClient struct {
	cc *grpc.ClientConn
}

func NewEntityServiceClient(cc *grpc.ClientConn) EntityServiceClient {
	return &entityServiceClient{cc}
}

func (c *entityServiceClient) GetEntity(ctx context.Context, in *IDQuery, opts ...grpc.CallOption) (*Entity, error) {
	out := new(Entity)
	err := grpc.Invoke(ctx, "/entity.EntityService/GetEntity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) ListEntities(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Entities, error) {
	out := new(Entities)
	err := grpc.Invoke(ctx, "/entity.EntityService/ListEntities", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) CreateEntity(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Entity, error) {
	out := new(Entity)
	err := grpc.Invoke(ctx, "/entity.EntityService/CreateEntity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) UpdateEntity(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Entity, error) {
	out := new(Entity)
	err := grpc.Invoke(ctx, "/entity.EntityService/UpdateEntity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) PatchEntity(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Entity, error) {
	out := new(Entity)
	err := grpc.Invoke(ctx, "/entity.EntityService/PatchEntity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityServiceClient) DeleteEntity(ctx context.Context, in *IDQuery, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/entity.EntityService/DeleteEntity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EntityService service

type EntityServiceServer interface {
	GetEntity(context.Context, *IDQuery) (*Entity, error)
	ListEntities(context.Context, *Query) (*Entities, error)
	CreateEntity(context.Context, *Entity) (*Entity, error)
	UpdateEntity(context.Context, *Entity) (*Entity, error)
	PatchEntity(context.Context, *Entity) (*Entity, error)
	DeleteEntity(context.Context, *IDQuery) (*Empty, error)
}

func RegisterEntityServiceServer(s *grpc.Server, srv EntityServiceServer) {
	s.RegisterService(&_EntityService_serviceDesc, srv)
}

func _EntityService_GetEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).GetEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entity.EntityService/GetEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).GetEntity(ctx, req.(*IDQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_ListEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).ListEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entity.EntityService/ListEntities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).ListEntities(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_CreateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).CreateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entity.EntityService/CreateEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).CreateEntity(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_UpdateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).UpdateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entity.EntityService/UpdateEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).UpdateEntity(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_PatchEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).PatchEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entity.EntityService/PatchEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).PatchEntity(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityService_DeleteEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServiceServer).DeleteEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entity.EntityService/DeleteEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServiceServer).DeleteEntity(ctx, req.(*IDQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _EntityService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "entity.EntityService",
	HandlerType: (*EntityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEntity",
			Handler:    _EntityService_GetEntity_Handler,
		},
		{
			MethodName: "ListEntities",
			Handler:    _EntityService_ListEntities_Handler,
		},
		{
			MethodName: "CreateEntity",
			Handler:    _EntityService_CreateEntity_Handler,
		},
		{
			MethodName: "UpdateEntity",
			Handler:    _EntityService_UpdateEntity_Handler,
		},
		{
			MethodName: "PatchEntity",
			Handler:    _EntityService_PatchEntity_Handler,
		},
		{
			MethodName: "DeleteEntity",
			Handler:    _EntityService_DeleteEntity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/entity.proto",
}

func init() { proto.RegisterFile("api/entity.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 673 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcf, 0x6e, 0xd3, 0x4e,
	0x10, 0x96, 0xed, 0x26, 0xa9, 0x27, 0x69, 0xda, 0x8e, 0xfa, 0xfb, 0x61, 0x85, 0xaa, 0x0a, 0xbe,
	0x34, 0xf4, 0x10, 0x4b, 0xa9, 0x04, 0xb4, 0x12, 0x88, 0xa6, 0x2d, 0x55, 0x11, 0x07, 0x30, 0x45,
	0x54, 0xdc, 0x36, 0x9b, 0x55, 0xb2, 0xc4, 0x7f, 0x22, 0x7b, 0x5d, 0x14, 0x21, 0x2e, 0xdc, 0x39,
	0xf1, 0x22, 0x3c, 0x05, 0x2f, 0xc0, 0x2b, 0xf0, 0x20, 0xc8, 0xeb, 0xb5, 0x1b, 0xc7, 0x1c, 0xe8,
	0xcd, 0x3b, 0xf3, 0xcd, 0x37, 0xdf, 0x7e, 0xb3, 0x1e, 0xd8, 0x22, 0x73, 0xee, 0xb0, 0x40, 0x70,
	0xb1, 0xe8, 0xcf, 0xa3, 0x50, 0x84, 0x58, 0xcf, 0x4e, 0x9d, 0xdd, 0x49, 0x18, 0x4e, 0x3c, 0xe6,
	0xa4, 0x00, 0x12, 0x04, 0xa1, 0x20, 0x82, 0x87, 0x41, 0x9c, 0xa1, 0xec, 0x9f, 0x3a, 0xd4, 0xcf,
	0x25, 0x10, 0xdb, 0xa0, 0xf3, 0xb1, 0xa5, 0x75, 0xb5, 0x9e, 0xe9, 0xea, 0x7c, 0x8c, 0x5d, 0x68,
	0xd2, 0x88, 0x11, 0xc1, 0xc6, 0x57, 0xdc, 0x67, 0x96, 0xde, 0xd5, 0x7a, 0x86, 0xbb, 0x1c, 0xc2,
	0x3d, 0x80, 0x64, 0x3e, 0x26, 0x82, 0x49, 0x80, 0x21, 0x01, 0x4b, 0x11, 0x7c, 0x06, 0x40, 0x84,
	0x88, 0xf8, 0x28, 0x11, 0x2c, 0xb6, 0xd6, 0xba, 0x46, 0xaf, 0x39, 0xd8, 0xeb, 0x2b, 0x95, 0x59,
	0xd7, 0xfe, 0x49, 0x01, 0x38, 0x0f, 0x44, 0xb4, 0x70, 0x97, 0x2a, 0xf0, 0x18, 0xda, 0x24, 0x11,
	0xd3, 0xb4, 0x80, 0x4a, 0xd5, 0x56, 0xad, 0xab, 0xf5, 0x9a, 0x03, 0x2c, 0x73, 0x9c, 0x24, 0x62,
	0xea, 0xae, 0x20, 0xd1, 0x81, 0xc6, 0x88, 0x7b, 0x1e, 0x0f, 0x26, 0x56, 0x5d, 0x36, 0xfe, 0xaf,
	0x5c, 0x34, 0xcc, 0x92, 0x6e, 0x8e, 0xea, 0x3c, 0x85, 0xcd, 0x15, 0x2d, 0xb8, 0x05, 0xc6, 0x8c,
	0x2d, 0x94, 0x25, 0xe9, 0x27, 0xee, 0x40, 0xed, 0x86, 0x78, 0x49, 0xe6, 0x86, 0xe9, 0x66, 0x87,
	0x63, 0xfd, 0x89, 0x66, 0x5f, 0x03, 0xdc, 0xaa, 0xc1, 0x7d, 0xa8, 0x8d, 0x48, 0xcc, 0xa9, 0xa5,
	0xc9, 0xde, 0xdb, 0x79, 0xef, 0x61, 0x1a, 0x94, 0x7a, 0xb3, 0x3c, 0x3e, 0x00, 0xe3, 0xe3, 0x27,
	0x61, 0xe9, 0x12, 0xb6, 0x99, 0xc3, 0x5e, 0xbe, 0xbf, 0x92, 0xa0, 0x34, 0x67, 0x33, 0x30, 0x8b,
	0xb2, 0xca, 0x90, 0xfe, 0x87, 0x7a, 0xcc, 0x68, 0xc4, 0x84, 0x52, 0xa4, 0x4e, 0x88, 0xb0, 0x26,
	0xc8, 0x24, 0xb6, 0x8c, 0xae, 0xd1, 0x33, 0x5d, 0xf9, 0x8d, 0xbb, 0x60, 0x0a, 0xee, 0xb3, 0x58,
	0x10, 0x7f, 0x6e, 0xad, 0xc9, 0x69, 0xdd, 0x06, 0xec, 0x6f, 0x1a, 0x34, 0x54, 0xdf, 0xb4, 0x3a,
	0x20, 0x3e, 0x53, 0x7d, 0xe4, 0x37, 0x1e, 0x42, 0x9d, 0x7a, 0x84, 0xfb, 0xb1, 0x12, 0x7b, 0x7f,
	0x45, 0x6c, 0xff, 0x54, 0x66, 0xb3, 0x29, 0x2a, 0x68, 0xe7, 0x08, 0x9a, 0x4b, 0xe1, 0x3b, 0x19,
	0x7a, 0x04, 0x1b, 0xa5, 0x49, 0xa1, 0x05, 0x0d, 0x42, 0x69, 0x98, 0x04, 0x42, 0x11, 0xe4, 0x47,
	0x65, 0x8a, 0x9e, 0x9b, 0x62, 0x5f, 0x43, 0xe3, 0xf2, 0xec, 0x4d, 0xc2, 0xa2, 0xea, 0xa3, 0xde,
	0x81, 0xda, 0x8c, 0x2d, 0x2e, 0x73, 0x74, 0x76, 0xc0, 0xfd, 0xe2, 0x6e, 0x86, 0x7c, 0x60, 0x95,
	0x41, 0xa8, 0xb4, 0xfd, 0x18, 0x6a, 0x7f, 0xe7, 0xdd, 0x2b, 0x3d, 0x75, 0x5d, 0xba, 0xbe, 0x14,
	0xb1, 0x1f, 0xc1, 0xba, 0xbc, 0x0d, 0x67, 0x31, 0x1e, 0xc0, 0x3a, 0x53, 0xdf, 0xea, 0x7d, 0xb4,
	0xcb, 0x6f, 0xd3, 0x2d, 0xf2, 0x76, 0x03, 0x6a, 0xe7, 0xfe, 0x5c, 0x2c, 0x06, 0x3f, 0x8c, 0xdc,
	0x8f, 0xb7, 0x2c, 0xba, 0xe1, 0x94, 0xe1, 0x10, 0xcc, 0x0b, 0x26, 0xd4, 0xcf, 0x5b, 0x28, 0x56,
	0x17, 0xef, 0xac, 0x50, 0xda, 0x3b, 0x5f, 0x7f, 0xfd, 0xfe, 0xae, 0xb7, 0xb1, 0xa5, 0xb6, 0x84,
	0xf3, 0x99, 0x8f, 0xbf, 0xe0, 0x73, 0x68, 0xbd, 0xe2, 0xb1, 0x28, 0xa4, 0x6d, 0xe4, 0x55, 0x19,
	0xc9, 0x56, 0x89, 0x24, 0xd5, 0xb3, 0x29, 0x69, 0x4c, 0x6c, 0x28, 0x1a, 0x1c, 0x42, 0xeb, 0x54,
	0xae, 0x84, 0x7c, 0x8b, 0x94, 0xfb, 0x56, 0x74, 0xa0, 0x24, 0x68, 0xd9, 0x39, 0xc1, 0xb1, 0x76,
	0x80, 0x17, 0xd0, 0x7a, 0x27, 0xb7, 0xc6, 0x3f, 0x72, 0xdc, 0x93, 0x1c, 0xdb, 0x9d, 0xd2, 0x5d,
	0x52, 0xa2, 0x17, 0xd0, 0x7c, 0x4d, 0x04, 0x9d, 0xde, 0x8d, 0x67, 0x50, 0xe1, 0x39, 0x83, 0xd6,
	0x19, 0xf3, 0x58, 0x21, 0xa8, 0xe2, 0x6e, 0xe1, 0x93, 0x1c, 0x4e, 0x6e, 0xee, 0x41, 0x89, 0x68,
	0xf8, 0xf0, 0xc3, 0xfe, 0x84, 0x8b, 0x69, 0x32, 0xea, 0xd3, 0xd0, 0x77, 0x66, 0xc9, 0x88, 0xd1,
	0x30, 0x9a, 0x3b, 0x34, 0x8c, 0x88, 0xe7, 0xc4, 0xe3, 0x99, 0x33, 0x09, 0x15, 0x7e, 0x54, 0x97,
	0xdb, 0xf8, 0xf0, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb9, 0xa6, 0x00, 0x57, 0xc7, 0x05, 0x00,
	0x00,
}
