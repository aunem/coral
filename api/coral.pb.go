// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/coral.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	api/coral.proto

It has these top-level messages:
	AuthorizationRequest
	AuthorizationResponse
	AuthorizationSigningResponse
	SigningRequest
	SigningResponse
	SigningPayloadRequest
	SigningPayloadResponse
	WellKnownResponse
	JWKsResponse
	JWTEnc
	JWKEnc
	Entity
	EntityAuth
	EntityBilling
	EntityIDQuery
	EntityQuery
	EntityList
	Issuer
	IssuerIDQuery
	IssuerQuery
	IssuerList
	Policy
	RequestAttributes
	RouteArray
	RoutePolicy
	MethodArray
	MethodPolicy
	PolicyIDQuery
	PolicyQuery
	PolicyList
	Empty
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Auth
type AuthorizationRequest struct {
	Jwt       string            `protobuf:"bytes,1,opt,name=jwt" json:"jwt,omitempty"`
	Path      string            `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	Headers   map[string]string `protobuf:"bytes,3,rep,name=headers" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Ip        string            `protobuf:"bytes,4,opt,name=ip" json:"ip,omitempty"`
	RequestID string            `protobuf:"bytes,5,opt,name=requestID" json:"requestID,omitempty"`
	Charge    bool              `protobuf:"varint,6,opt,name=charge" json:"charge,omitempty"`
}

func (m *AuthorizationRequest) Reset()                    { *m = AuthorizationRequest{} }
func (m *AuthorizationRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthorizationRequest) ProtoMessage()               {}
func (*AuthorizationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AuthorizationRequest) GetJwt() string {
	if m != nil {
		return m.Jwt
	}
	return ""
}

func (m *AuthorizationRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *AuthorizationRequest) GetHeaders() map[string]string {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *AuthorizationRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *AuthorizationRequest) GetRequestID() string {
	if m != nil {
		return m.RequestID
	}
	return ""
}

func (m *AuthorizationRequest) GetCharge() bool {
	if m != nil {
		return m.Charge
	}
	return false
}

type AuthorizationResponse struct {
	Allowed bool    `protobuf:"varint,1,opt,name=allowed" json:"allowed,omitempty"`
	Entity  *Entity `protobuf:"bytes,2,opt,name=entity" json:"entity,omitempty"`
}

func (m *AuthorizationResponse) Reset()                    { *m = AuthorizationResponse{} }
func (m *AuthorizationResponse) String() string            { return proto.CompactTextString(m) }
func (*AuthorizationResponse) ProtoMessage()               {}
func (*AuthorizationResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AuthorizationResponse) GetAllowed() bool {
	if m != nil {
		return m.Allowed
	}
	return false
}

func (m *AuthorizationResponse) GetEntity() *Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

type AuthorizationSigningResponse struct {
	Allowed bool   `protobuf:"varint,1,opt,name=allowed" json:"allowed,omitempty"`
	Jwt     string `protobuf:"bytes,2,opt,name=jwt" json:"jwt,omitempty"`
}

func (m *AuthorizationSigningResponse) Reset()                    { *m = AuthorizationSigningResponse{} }
func (m *AuthorizationSigningResponse) String() string            { return proto.CompactTextString(m) }
func (*AuthorizationSigningResponse) ProtoMessage()               {}
func (*AuthorizationSigningResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AuthorizationSigningResponse) GetAllowed() bool {
	if m != nil {
		return m.Allowed
	}
	return false
}

func (m *AuthorizationSigningResponse) GetJwt() string {
	if m != nil {
		return m.Jwt
	}
	return ""
}

type SigningRequest struct {
	Jwt string `protobuf:"bytes,1,opt,name=jwt" json:"jwt,omitempty"`
}

func (m *SigningRequest) Reset()                    { *m = SigningRequest{} }
func (m *SigningRequest) String() string            { return proto.CompactTextString(m) }
func (*SigningRequest) ProtoMessage()               {}
func (*SigningRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SigningRequest) GetJwt() string {
	if m != nil {
		return m.Jwt
	}
	return ""
}

type SigningResponse struct {
	Jwt string `protobuf:"bytes,1,opt,name=jwt" json:"jwt,omitempty"`
}

func (m *SigningResponse) Reset()                    { *m = SigningResponse{} }
func (m *SigningResponse) String() string            { return proto.CompactTextString(m) }
func (*SigningResponse) ProtoMessage()               {}
func (*SigningResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SigningResponse) GetJwt() string {
	if m != nil {
		return m.Jwt
	}
	return ""
}

type SigningPayloadRequest struct {
	Payload string `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
}

func (m *SigningPayloadRequest) Reset()                    { *m = SigningPayloadRequest{} }
func (m *SigningPayloadRequest) String() string            { return proto.CompactTextString(m) }
func (*SigningPayloadRequest) ProtoMessage()               {}
func (*SigningPayloadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SigningPayloadRequest) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

type SigningPayloadResponse struct {
	Jwt string `protobuf:"bytes,1,opt,name=jwt" json:"jwt,omitempty"`
}

func (m *SigningPayloadResponse) Reset()                    { *m = SigningPayloadResponse{} }
func (m *SigningPayloadResponse) String() string            { return proto.CompactTextString(m) }
func (*SigningPayloadResponse) ProtoMessage()               {}
func (*SigningPayloadResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SigningPayloadResponse) GetJwt() string {
	if m != nil {
		return m.Jwt
	}
	return ""
}

type WellKnownResponse struct {
	Issuer  string `protobuf:"bytes,1,opt,name=issuer" json:"issuer,omitempty"`
	JwksUri string `protobuf:"bytes,2,opt,name=jwksUri" json:"jwksUri,omitempty"`
}

func (m *WellKnownResponse) Reset()                    { *m = WellKnownResponse{} }
func (m *WellKnownResponse) String() string            { return proto.CompactTextString(m) }
func (*WellKnownResponse) ProtoMessage()               {}
func (*WellKnownResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *WellKnownResponse) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *WellKnownResponse) GetJwksUri() string {
	if m != nil {
		return m.JwksUri
	}
	return ""
}

type JWKsResponse struct {
	Keys map[string]*JWKEnc `protobuf:"bytes,1,rep,name=keys" json:"keys,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *JWKsResponse) Reset()                    { *m = JWKsResponse{} }
func (m *JWKsResponse) String() string            { return proto.CompactTextString(m) }
func (*JWKsResponse) ProtoMessage()               {}
func (*JWKsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *JWKsResponse) GetKeys() map[string]*JWKEnc {
	if m != nil {
		return m.Keys
	}
	return nil
}

type JWTEnc struct {
	Jwt     string `protobuf:"bytes,1,opt,name=jwt" json:"jwt,omitempty"`
	Expires int64  `protobuf:"varint,2,opt,name=expires" json:"expires,omitempty"`
}

func (m *JWTEnc) Reset()                    { *m = JWTEnc{} }
func (m *JWTEnc) String() string            { return proto.CompactTextString(m) }
func (*JWTEnc) ProtoMessage()               {}
func (*JWTEnc) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *JWTEnc) GetJwt() string {
	if m != nil {
		return m.Jwt
	}
	return ""
}

func (m *JWTEnc) GetExpires() int64 {
	if m != nil {
		return m.Expires
	}
	return 0
}

type JWKEnc struct {
	Jwk     string `protobuf:"bytes,1,opt,name=jwk" json:"jwk,omitempty"`
	Expires int64  `protobuf:"varint,2,opt,name=expires" json:"expires,omitempty"`
}

func (m *JWKEnc) Reset()                    { *m = JWKEnc{} }
func (m *JWKEnc) String() string            { return proto.CompactTextString(m) }
func (*JWKEnc) ProtoMessage()               {}
func (*JWKEnc) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *JWKEnc) GetJwk() string {
	if m != nil {
		return m.Jwk
	}
	return ""
}

func (m *JWKEnc) GetExpires() int64 {
	if m != nil {
		return m.Expires
	}
	return 0
}

// Entity
type Entity struct {
	Version        string            `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	Id             string            `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Attributes     map[string]string `protobuf:"bytes,3,rep,name=attributes" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Authentication []*EntityAuth     `protobuf:"bytes,4,rep,name=authentication" json:"authentication,omitempty"`
	Billing        []*EntityBilling  `protobuf:"bytes,5,rep,name=billing" json:"billing,omitempty"`
}

func (m *Entity) Reset()                    { *m = Entity{} }
func (m *Entity) String() string            { return proto.CompactTextString(m) }
func (*Entity) ProtoMessage()               {}
func (*Entity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Entity) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Entity) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Entity) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Entity) GetAuthentication() []*EntityAuth {
	if m != nil {
		return m.Authentication
	}
	return nil
}

func (m *Entity) GetBilling() []*EntityBilling {
	if m != nil {
		return m.Billing
	}
	return nil
}

type EntityAuth struct {
	Name   string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Claims map[string]string `protobuf:"bytes,2,rep,name=claims" json:"claims,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *EntityAuth) Reset()                    { *m = EntityAuth{} }
func (m *EntityAuth) String() string            { return proto.CompactTextString(m) }
func (*EntityAuth) ProtoMessage()               {}
func (*EntityAuth) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *EntityAuth) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EntityAuth) GetClaims() map[string]string {
	if m != nil {
		return m.Claims
	}
	return nil
}

type EntityBilling struct {
	Account string `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	Id      string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (m *EntityBilling) Reset()                    { *m = EntityBilling{} }
func (m *EntityBilling) String() string            { return proto.CompactTextString(m) }
func (*EntityBilling) ProtoMessage()               {}
func (*EntityBilling) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *EntityBilling) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *EntityBilling) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type EntityIDQuery struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *EntityIDQuery) Reset()                    { *m = EntityIDQuery{} }
func (m *EntityIDQuery) String() string            { return proto.CompactTextString(m) }
func (*EntityIDQuery) ProtoMessage()               {}
func (*EntityIDQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *EntityIDQuery) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type EntityQuery struct {
	Id         int64    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Attributes []string `protobuf:"bytes,2,rep,name=attributes" json:"attributes,omitempty"`
}

func (m *EntityQuery) Reset()                    { *m = EntityQuery{} }
func (m *EntityQuery) String() string            { return proto.CompactTextString(m) }
func (*EntityQuery) ProtoMessage()               {}
func (*EntityQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *EntityQuery) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EntityQuery) GetAttributes() []string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type EntityList struct {
	Entities []*Entity `protobuf:"bytes,1,rep,name=entities" json:"entities,omitempty"`
}

func (m *EntityList) Reset()                    { *m = EntityList{} }
func (m *EntityList) String() string            { return proto.CompactTextString(m) }
func (*EntityList) ProtoMessage()               {}
func (*EntityList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *EntityList) GetEntities() []*Entity {
	if m != nil {
		return m.Entities
	}
	return nil
}

// Issuer
type Issuer struct {
	Version      string `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	Id           string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Name         string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Issuer       string `protobuf:"bytes,4,opt,name=issuer" json:"issuer,omitempty"`
	JwksUri      string `protobuf:"bytes,5,opt,name=jwksUri" json:"jwksUri,omitempty"`
	IssuerClaim  string `protobuf:"bytes,6,opt,name=issuerClaim" json:"issuerClaim,omitempty"`
	SubjectClaim string `protobuf:"bytes,7,opt,name=subjectClaim" json:"subjectClaim,omitempty"`
	ExpiresClaim string `protobuf:"bytes,8,opt,name=expiresClaim" json:"expiresClaim,omitempty"`
}

func (m *Issuer) Reset()                    { *m = Issuer{} }
func (m *Issuer) String() string            { return proto.CompactTextString(m) }
func (*Issuer) ProtoMessage()               {}
func (*Issuer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *Issuer) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Issuer) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Issuer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Issuer) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *Issuer) GetJwksUri() string {
	if m != nil {
		return m.JwksUri
	}
	return ""
}

func (m *Issuer) GetIssuerClaim() string {
	if m != nil {
		return m.IssuerClaim
	}
	return ""
}

func (m *Issuer) GetSubjectClaim() string {
	if m != nil {
		return m.SubjectClaim
	}
	return ""
}

func (m *Issuer) GetExpiresClaim() string {
	if m != nil {
		return m.ExpiresClaim
	}
	return ""
}

type IssuerIDQuery struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *IssuerIDQuery) Reset()                    { *m = IssuerIDQuery{} }
func (m *IssuerIDQuery) String() string            { return proto.CompactTextString(m) }
func (*IssuerIDQuery) ProtoMessage()               {}
func (*IssuerIDQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *IssuerIDQuery) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type IssuerQuery struct {
	Name   string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Issuer string `protobuf:"bytes,2,opt,name=issuer" json:"issuer,omitempty"`
}

func (m *IssuerQuery) Reset()                    { *m = IssuerQuery{} }
func (m *IssuerQuery) String() string            { return proto.CompactTextString(m) }
func (*IssuerQuery) ProtoMessage()               {}
func (*IssuerQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *IssuerQuery) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *IssuerQuery) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

type IssuerList struct {
	Issuer []*Issuer `protobuf:"bytes,1,rep,name=issuer" json:"issuer,omitempty"`
}

func (m *IssuerList) Reset()                    { *m = IssuerList{} }
func (m *IssuerList) String() string            { return proto.CompactTextString(m) }
func (*IssuerList) ProtoMessage()               {}
func (*IssuerList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *IssuerList) GetIssuer() []*Issuer {
	if m != nil {
		return m.Issuer
	}
	return nil
}

// Policy
type Policy struct {
	Id                string                   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name              string                   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	EntityAttributes  map[string]string        `protobuf:"bytes,3,rep,name=entityAttributes" json:"entityAttributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Effect            string                   `protobuf:"bytes,4,opt,name=effect" json:"effect,omitempty"`
	RequestAttributes *RequestAttributes       `protobuf:"bytes,5,opt,name=requestAttributes" json:"requestAttributes,omitempty"`
	Http              map[string]*RouteArray   `protobuf:"bytes,6,rep,name=http" json:"http,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Grpc              map[string]*MethodPolicy `protobuf:"bytes,7,rep,name=grpc" json:"grpc,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Policy) Reset()                    { *m = Policy{} }
func (m *Policy) String() string            { return proto.CompactTextString(m) }
func (*Policy) ProtoMessage()               {}
func (*Policy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *Policy) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Policy) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Policy) GetEntityAttributes() map[string]string {
	if m != nil {
		return m.EntityAttributes
	}
	return nil
}

func (m *Policy) GetEffect() string {
	if m != nil {
		return m.Effect
	}
	return ""
}

func (m *Policy) GetRequestAttributes() *RequestAttributes {
	if m != nil {
		return m.RequestAttributes
	}
	return nil
}

func (m *Policy) GetHttp() map[string]*RouteArray {
	if m != nil {
		return m.Http
	}
	return nil
}

func (m *Policy) GetGrpc() map[string]*MethodPolicy {
	if m != nil {
		return m.Grpc
	}
	return nil
}

type RequestAttributes struct {
	Headers map[string]string `protobuf:"bytes,1,rep,name=headers" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Ip      string            `protobuf:"bytes,2,opt,name=ip" json:"ip,omitempty"`
	Host    string            `protobuf:"bytes,3,opt,name=host" json:"host,omitempty"`
	Query   string            `protobuf:"bytes,4,opt,name=query" json:"query,omitempty"`
}

func (m *RequestAttributes) Reset()                    { *m = RequestAttributes{} }
func (m *RequestAttributes) String() string            { return proto.CompactTextString(m) }
func (*RequestAttributes) ProtoMessage()               {}
func (*RequestAttributes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *RequestAttributes) GetHeaders() map[string]string {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *RequestAttributes) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *RequestAttributes) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *RequestAttributes) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type RouteArray struct {
	RoutePolicies []*RoutePolicy `protobuf:"bytes,1,rep,name=routePolicies" json:"routePolicies,omitempty"`
}

func (m *RouteArray) Reset()                    { *m = RouteArray{} }
func (m *RouteArray) String() string            { return proto.CompactTextString(m) }
func (*RouteArray) ProtoMessage()               {}
func (*RouteArray) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *RouteArray) GetRoutePolicies() []*RoutePolicy {
	if m != nil {
		return m.RoutePolicies
	}
	return nil
}

type RoutePolicy struct {
	Actions           string             `protobuf:"bytes,1,opt,name=actions" json:"actions,omitempty"`
	RequestAttributes *RequestAttributes `protobuf:"bytes,2,opt,name=requestAttributes" json:"requestAttributes,omitempty"`
}

func (m *RoutePolicy) Reset()                    { *m = RoutePolicy{} }
func (m *RoutePolicy) String() string            { return proto.CompactTextString(m) }
func (*RoutePolicy) ProtoMessage()               {}
func (*RoutePolicy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *RoutePolicy) GetActions() string {
	if m != nil {
		return m.Actions
	}
	return ""
}

func (m *RoutePolicy) GetRequestAttributes() *RequestAttributes {
	if m != nil {
		return m.RequestAttributes
	}
	return nil
}

type MethodArray struct {
	MethodPolicies []*MethodPolicy `protobuf:"bytes,1,rep,name=methodPolicies" json:"methodPolicies,omitempty"`
}

func (m *MethodArray) Reset()                    { *m = MethodArray{} }
func (m *MethodArray) String() string            { return proto.CompactTextString(m) }
func (*MethodArray) ProtoMessage()               {}
func (*MethodArray) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *MethodArray) GetMethodPolicies() []*MethodPolicy {
	if m != nil {
		return m.MethodPolicies
	}
	return nil
}

type MethodPolicy struct {
	RequestAttributes *RequestAttributes `protobuf:"bytes,1,opt,name=requestAttributes" json:"requestAttributes,omitempty"`
}

func (m *MethodPolicy) Reset()                    { *m = MethodPolicy{} }
func (m *MethodPolicy) String() string            { return proto.CompactTextString(m) }
func (*MethodPolicy) ProtoMessage()               {}
func (*MethodPolicy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *MethodPolicy) GetRequestAttributes() *RequestAttributes {
	if m != nil {
		return m.RequestAttributes
	}
	return nil
}

type PolicyIDQuery struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *PolicyIDQuery) Reset()                    { *m = PolicyIDQuery{} }
func (m *PolicyIDQuery) String() string            { return proto.CompactTextString(m) }
func (*PolicyIDQuery) ProtoMessage()               {}
func (*PolicyIDQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *PolicyIDQuery) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type PolicyQuery struct {
	EntityAttributes []string `protobuf:"bytes,1,rep,name=entityAttributes" json:"entityAttributes,omitempty"`
}

func (m *PolicyQuery) Reset()                    { *m = PolicyQuery{} }
func (m *PolicyQuery) String() string            { return proto.CompactTextString(m) }
func (*PolicyQuery) ProtoMessage()               {}
func (*PolicyQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *PolicyQuery) GetEntityAttributes() []string {
	if m != nil {
		return m.EntityAttributes
	}
	return nil
}

type PolicyList struct {
	Policies []*Policy `protobuf:"bytes,1,rep,name=policies" json:"policies,omitempty"`
}

func (m *PolicyList) Reset()                    { *m = PolicyList{} }
func (m *PolicyList) String() string            { return proto.CompactTextString(m) }
func (*PolicyList) ProtoMessage()               {}
func (*PolicyList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *PolicyList) GetPolicies() []*Policy {
	if m != nil {
		return m.Policies
	}
	return nil
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func init() {
	proto.RegisterType((*AuthorizationRequest)(nil), "api.AuthorizationRequest")
	proto.RegisterType((*AuthorizationResponse)(nil), "api.AuthorizationResponse")
	proto.RegisterType((*AuthorizationSigningResponse)(nil), "api.AuthorizationSigningResponse")
	proto.RegisterType((*SigningRequest)(nil), "api.SigningRequest")
	proto.RegisterType((*SigningResponse)(nil), "api.SigningResponse")
	proto.RegisterType((*SigningPayloadRequest)(nil), "api.SigningPayloadRequest")
	proto.RegisterType((*SigningPayloadResponse)(nil), "api.SigningPayloadResponse")
	proto.RegisterType((*WellKnownResponse)(nil), "api.WellKnownResponse")
	proto.RegisterType((*JWKsResponse)(nil), "api.JWKsResponse")
	proto.RegisterType((*JWTEnc)(nil), "api.JWTEnc")
	proto.RegisterType((*JWKEnc)(nil), "api.JWKEnc")
	proto.RegisterType((*Entity)(nil), "api.Entity")
	proto.RegisterType((*EntityAuth)(nil), "api.EntityAuth")
	proto.RegisterType((*EntityBilling)(nil), "api.EntityBilling")
	proto.RegisterType((*EntityIDQuery)(nil), "api.EntityIDQuery")
	proto.RegisterType((*EntityQuery)(nil), "api.EntityQuery")
	proto.RegisterType((*EntityList)(nil), "api.EntityList")
	proto.RegisterType((*Issuer)(nil), "api.Issuer")
	proto.RegisterType((*IssuerIDQuery)(nil), "api.IssuerIDQuery")
	proto.RegisterType((*IssuerQuery)(nil), "api.IssuerQuery")
	proto.RegisterType((*IssuerList)(nil), "api.IssuerList")
	proto.RegisterType((*Policy)(nil), "api.Policy")
	proto.RegisterType((*RequestAttributes)(nil), "api.RequestAttributes")
	proto.RegisterType((*RouteArray)(nil), "api.RouteArray")
	proto.RegisterType((*RoutePolicy)(nil), "api.RoutePolicy")
	proto.RegisterType((*MethodArray)(nil), "api.MethodArray")
	proto.RegisterType((*MethodPolicy)(nil), "api.MethodPolicy")
	proto.RegisterType((*PolicyIDQuery)(nil), "api.PolicyIDQuery")
	proto.RegisterType((*PolicyQuery)(nil), "api.PolicyQuery")
	proto.RegisterType((*PolicyList)(nil), "api.PolicyList")
	proto.RegisterType((*Empty)(nil), "api.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Coral service

type CoralClient interface {
	Authorize(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*AuthorizationResponse, error)
	AuthorizeAndSign(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*AuthorizationSigningResponse, error)
	Sign(ctx context.Context, in *SigningRequest, opts ...grpc.CallOption) (*SigningResponse, error)
	SignPayload(ctx context.Context, in *SigningPayloadRequest, opts ...grpc.CallOption) (*SigningPayloadResponse, error)
	EntityInfo(ctx context.Context, in *JWTEnc, opts ...grpc.CallOption) (*Entity, error)
	WellKnown(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*WellKnownResponse, error)
	JWKs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*JWKsResponse, error)
	GetEntity(ctx context.Context, in *EntityIDQuery, opts ...grpc.CallOption) (*Entity, error)
	ListEntity(ctx context.Context, in *EntityQuery, opts ...grpc.CallOption) (*EntityList, error)
	CreateEntity(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Entity, error)
	UpdateEntity(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Entity, error)
	PatchEntity(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Entity, error)
	DeleteEntity(ctx context.Context, in *EntityIDQuery, opts ...grpc.CallOption) (*Empty, error)
	GetIssuer(ctx context.Context, in *IssuerIDQuery, opts ...grpc.CallOption) (*Issuer, error)
	ListIssuers(ctx context.Context, in *IssuerQuery, opts ...grpc.CallOption) (*IssuerList, error)
	CreateIssuer(ctx context.Context, in *Issuer, opts ...grpc.CallOption) (*Issuer, error)
	UpdateIssuer(ctx context.Context, in *Issuer, opts ...grpc.CallOption) (*Issuer, error)
	PatchIssuer(ctx context.Context, in *Issuer, opts ...grpc.CallOption) (*Issuer, error)
	DeleteIssuer(ctx context.Context, in *IssuerIDQuery, opts ...grpc.CallOption) (*Empty, error)
	GetPolicy(ctx context.Context, in *PolicyIDQuery, opts ...grpc.CallOption) (*Policy, error)
	ListPolicies(ctx context.Context, in *PolicyQuery, opts ...grpc.CallOption) (*PolicyList, error)
	CreatePolicy(ctx context.Context, in *Policy, opts ...grpc.CallOption) (*Policy, error)
	UpdatePolicy(ctx context.Context, in *Policy, opts ...grpc.CallOption) (*Policy, error)
	PatchPolicy(ctx context.Context, in *Policy, opts ...grpc.CallOption) (*Policy, error)
	DeletePolicy(ctx context.Context, in *PolicyIDQuery, opts ...grpc.CallOption) (*Empty, error)
}

type coralClient struct {
	cc *grpc.ClientConn
}

func NewCoralClient(cc *grpc.ClientConn) CoralClient {
	return &coralClient{cc}
}

func (c *coralClient) Authorize(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*AuthorizationResponse, error) {
	out := new(AuthorizationResponse)
	err := grpc.Invoke(ctx, "/api.Coral/Authorize", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coralClient) AuthorizeAndSign(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*AuthorizationSigningResponse, error) {
	out := new(AuthorizationSigningResponse)
	err := grpc.Invoke(ctx, "/api.Coral/AuthorizeAndSign", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coralClient) Sign(ctx context.Context, in *SigningRequest, opts ...grpc.CallOption) (*SigningResponse, error) {
	out := new(SigningResponse)
	err := grpc.Invoke(ctx, "/api.Coral/Sign", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coralClient) SignPayload(ctx context.Context, in *SigningPayloadRequest, opts ...grpc.CallOption) (*SigningPayloadResponse, error) {
	out := new(SigningPayloadResponse)
	err := grpc.Invoke(ctx, "/api.Coral/SignPayload", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coralClient) EntityInfo(ctx context.Context, in *JWTEnc, opts ...grpc.CallOption) (*Entity, error) {
	out := new(Entity)
	err := grpc.Invoke(ctx, "/api.Coral/EntityInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coralClient) WellKnown(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*WellKnownResponse, error) {
	out := new(WellKnownResponse)
	err := grpc.Invoke(ctx, "/api.Coral/WellKnown", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coralClient) JWKs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*JWKsResponse, error) {
	out := new(JWKsResponse)
	err := grpc.Invoke(ctx, "/api.Coral/JWKs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coralClient) GetEntity(ctx context.Context, in *EntityIDQuery, opts ...grpc.CallOption) (*Entity, error) {
	out := new(Entity)
	err := grpc.Invoke(ctx, "/api.Coral/GetEntity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coralClient) ListEntity(ctx context.Context, in *EntityQuery, opts ...grpc.CallOption) (*EntityList, error) {
	out := new(EntityList)
	err := grpc.Invoke(ctx, "/api.Coral/ListEntity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coralClient) CreateEntity(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Entity, error) {
	out := new(Entity)
	err := grpc.Invoke(ctx, "/api.Coral/CreateEntity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coralClient) UpdateEntity(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Entity, error) {
	out := new(Entity)
	err := grpc.Invoke(ctx, "/api.Coral/UpdateEntity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coralClient) PatchEntity(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Entity, error) {
	out := new(Entity)
	err := grpc.Invoke(ctx, "/api.Coral/PatchEntity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coralClient) DeleteEntity(ctx context.Context, in *EntityIDQuery, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/api.Coral/DeleteEntity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coralClient) GetIssuer(ctx context.Context, in *IssuerIDQuery, opts ...grpc.CallOption) (*Issuer, error) {
	out := new(Issuer)
	err := grpc.Invoke(ctx, "/api.Coral/GetIssuer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coralClient) ListIssuers(ctx context.Context, in *IssuerQuery, opts ...grpc.CallOption) (*IssuerList, error) {
	out := new(IssuerList)
	err := grpc.Invoke(ctx, "/api.Coral/ListIssuers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coralClient) CreateIssuer(ctx context.Context, in *Issuer, opts ...grpc.CallOption) (*Issuer, error) {
	out := new(Issuer)
	err := grpc.Invoke(ctx, "/api.Coral/CreateIssuer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coralClient) UpdateIssuer(ctx context.Context, in *Issuer, opts ...grpc.CallOption) (*Issuer, error) {
	out := new(Issuer)
	err := grpc.Invoke(ctx, "/api.Coral/UpdateIssuer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coralClient) PatchIssuer(ctx context.Context, in *Issuer, opts ...grpc.CallOption) (*Issuer, error) {
	out := new(Issuer)
	err := grpc.Invoke(ctx, "/api.Coral/PatchIssuer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coralClient) DeleteIssuer(ctx context.Context, in *IssuerIDQuery, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/api.Coral/DeleteIssuer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coralClient) GetPolicy(ctx context.Context, in *PolicyIDQuery, opts ...grpc.CallOption) (*Policy, error) {
	out := new(Policy)
	err := grpc.Invoke(ctx, "/api.Coral/GetPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coralClient) ListPolicies(ctx context.Context, in *PolicyQuery, opts ...grpc.CallOption) (*PolicyList, error) {
	out := new(PolicyList)
	err := grpc.Invoke(ctx, "/api.Coral/ListPolicies", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coralClient) CreatePolicy(ctx context.Context, in *Policy, opts ...grpc.CallOption) (*Policy, error) {
	out := new(Policy)
	err := grpc.Invoke(ctx, "/api.Coral/CreatePolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coralClient) UpdatePolicy(ctx context.Context, in *Policy, opts ...grpc.CallOption) (*Policy, error) {
	out := new(Policy)
	err := grpc.Invoke(ctx, "/api.Coral/UpdatePolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coralClient) PatchPolicy(ctx context.Context, in *Policy, opts ...grpc.CallOption) (*Policy, error) {
	out := new(Policy)
	err := grpc.Invoke(ctx, "/api.Coral/PatchPolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coralClient) DeletePolicy(ctx context.Context, in *PolicyIDQuery, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/api.Coral/DeletePolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Coral service

type CoralServer interface {
	Authorize(context.Context, *AuthorizationRequest) (*AuthorizationResponse, error)
	AuthorizeAndSign(context.Context, *AuthorizationRequest) (*AuthorizationSigningResponse, error)
	Sign(context.Context, *SigningRequest) (*SigningResponse, error)
	SignPayload(context.Context, *SigningPayloadRequest) (*SigningPayloadResponse, error)
	EntityInfo(context.Context, *JWTEnc) (*Entity, error)
	WellKnown(context.Context, *Empty) (*WellKnownResponse, error)
	JWKs(context.Context, *Empty) (*JWKsResponse, error)
	GetEntity(context.Context, *EntityIDQuery) (*Entity, error)
	ListEntity(context.Context, *EntityQuery) (*EntityList, error)
	CreateEntity(context.Context, *Entity) (*Entity, error)
	UpdateEntity(context.Context, *Entity) (*Entity, error)
	PatchEntity(context.Context, *Entity) (*Entity, error)
	DeleteEntity(context.Context, *EntityIDQuery) (*Empty, error)
	GetIssuer(context.Context, *IssuerIDQuery) (*Issuer, error)
	ListIssuers(context.Context, *IssuerQuery) (*IssuerList, error)
	CreateIssuer(context.Context, *Issuer) (*Issuer, error)
	UpdateIssuer(context.Context, *Issuer) (*Issuer, error)
	PatchIssuer(context.Context, *Issuer) (*Issuer, error)
	DeleteIssuer(context.Context, *IssuerIDQuery) (*Empty, error)
	GetPolicy(context.Context, *PolicyIDQuery) (*Policy, error)
	ListPolicies(context.Context, *PolicyQuery) (*PolicyList, error)
	CreatePolicy(context.Context, *Policy) (*Policy, error)
	UpdatePolicy(context.Context, *Policy) (*Policy, error)
	PatchPolicy(context.Context, *Policy) (*Policy, error)
	DeletePolicy(context.Context, *PolicyIDQuery) (*Empty, error)
}

func RegisterCoralServer(s *grpc.Server, srv CoralServer) {
	s.RegisterService(&_Coral_serviceDesc, srv)
}

func _Coral_Authorize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoralServer).Authorize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Coral/Authorize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoralServer).Authorize(ctx, req.(*AuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coral_AuthorizeAndSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoralServer).AuthorizeAndSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Coral/AuthorizeAndSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoralServer).AuthorizeAndSign(ctx, req.(*AuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coral_Sign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SigningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoralServer).Sign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Coral/Sign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoralServer).Sign(ctx, req.(*SigningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coral_SignPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SigningPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoralServer).SignPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Coral/SignPayload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoralServer).SignPayload(ctx, req.(*SigningPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coral_EntityInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JWTEnc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoralServer).EntityInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Coral/EntityInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoralServer).EntityInfo(ctx, req.(*JWTEnc))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coral_WellKnown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoralServer).WellKnown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Coral/WellKnown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoralServer).WellKnown(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coral_JWKs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoralServer).JWKs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Coral/JWKs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoralServer).JWKs(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coral_GetEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityIDQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoralServer).GetEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Coral/GetEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoralServer).GetEntity(ctx, req.(*EntityIDQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coral_ListEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoralServer).ListEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Coral/ListEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoralServer).ListEntity(ctx, req.(*EntityQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coral_CreateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoralServer).CreateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Coral/CreateEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoralServer).CreateEntity(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coral_UpdateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoralServer).UpdateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Coral/UpdateEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoralServer).UpdateEntity(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coral_PatchEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoralServer).PatchEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Coral/PatchEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoralServer).PatchEntity(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coral_DeleteEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityIDQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoralServer).DeleteEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Coral/DeleteEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoralServer).DeleteEntity(ctx, req.(*EntityIDQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coral_GetIssuer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssuerIDQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoralServer).GetIssuer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Coral/GetIssuer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoralServer).GetIssuer(ctx, req.(*IssuerIDQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coral_ListIssuers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssuerQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoralServer).ListIssuers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Coral/ListIssuers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoralServer).ListIssuers(ctx, req.(*IssuerQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coral_CreateIssuer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Issuer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoralServer).CreateIssuer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Coral/CreateIssuer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoralServer).CreateIssuer(ctx, req.(*Issuer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coral_UpdateIssuer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Issuer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoralServer).UpdateIssuer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Coral/UpdateIssuer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoralServer).UpdateIssuer(ctx, req.(*Issuer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coral_PatchIssuer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Issuer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoralServer).PatchIssuer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Coral/PatchIssuer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoralServer).PatchIssuer(ctx, req.(*Issuer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coral_DeleteIssuer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssuerIDQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoralServer).DeleteIssuer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Coral/DeleteIssuer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoralServer).DeleteIssuer(ctx, req.(*IssuerIDQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coral_GetPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyIDQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoralServer).GetPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Coral/GetPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoralServer).GetPolicy(ctx, req.(*PolicyIDQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coral_ListPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoralServer).ListPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Coral/ListPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoralServer).ListPolicies(ctx, req.(*PolicyQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coral_CreatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Policy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoralServer).CreatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Coral/CreatePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoralServer).CreatePolicy(ctx, req.(*Policy))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coral_UpdatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Policy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoralServer).UpdatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Coral/UpdatePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoralServer).UpdatePolicy(ctx, req.(*Policy))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coral_PatchPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Policy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoralServer).PatchPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Coral/PatchPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoralServer).PatchPolicy(ctx, req.(*Policy))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coral_DeletePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyIDQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoralServer).DeletePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Coral/DeletePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoralServer).DeletePolicy(ctx, req.(*PolicyIDQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _Coral_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Coral",
	HandlerType: (*CoralServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authorize",
			Handler:    _Coral_Authorize_Handler,
		},
		{
			MethodName: "AuthorizeAndSign",
			Handler:    _Coral_AuthorizeAndSign_Handler,
		},
		{
			MethodName: "Sign",
			Handler:    _Coral_Sign_Handler,
		},
		{
			MethodName: "SignPayload",
			Handler:    _Coral_SignPayload_Handler,
		},
		{
			MethodName: "EntityInfo",
			Handler:    _Coral_EntityInfo_Handler,
		},
		{
			MethodName: "WellKnown",
			Handler:    _Coral_WellKnown_Handler,
		},
		{
			MethodName: "JWKs",
			Handler:    _Coral_JWKs_Handler,
		},
		{
			MethodName: "GetEntity",
			Handler:    _Coral_GetEntity_Handler,
		},
		{
			MethodName: "ListEntity",
			Handler:    _Coral_ListEntity_Handler,
		},
		{
			MethodName: "CreateEntity",
			Handler:    _Coral_CreateEntity_Handler,
		},
		{
			MethodName: "UpdateEntity",
			Handler:    _Coral_UpdateEntity_Handler,
		},
		{
			MethodName: "PatchEntity",
			Handler:    _Coral_PatchEntity_Handler,
		},
		{
			MethodName: "DeleteEntity",
			Handler:    _Coral_DeleteEntity_Handler,
		},
		{
			MethodName: "GetIssuer",
			Handler:    _Coral_GetIssuer_Handler,
		},
		{
			MethodName: "ListIssuers",
			Handler:    _Coral_ListIssuers_Handler,
		},
		{
			MethodName: "CreateIssuer",
			Handler:    _Coral_CreateIssuer_Handler,
		},
		{
			MethodName: "UpdateIssuer",
			Handler:    _Coral_UpdateIssuer_Handler,
		},
		{
			MethodName: "PatchIssuer",
			Handler:    _Coral_PatchIssuer_Handler,
		},
		{
			MethodName: "DeleteIssuer",
			Handler:    _Coral_DeleteIssuer_Handler,
		},
		{
			MethodName: "GetPolicy",
			Handler:    _Coral_GetPolicy_Handler,
		},
		{
			MethodName: "ListPolicies",
			Handler:    _Coral_ListPolicies_Handler,
		},
		{
			MethodName: "CreatePolicy",
			Handler:    _Coral_CreatePolicy_Handler,
		},
		{
			MethodName: "UpdatePolicy",
			Handler:    _Coral_UpdatePolicy_Handler,
		},
		{
			MethodName: "PatchPolicy",
			Handler:    _Coral_PatchPolicy_Handler,
		},
		{
			MethodName: "DeletePolicy",
			Handler:    _Coral_DeletePolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/coral.proto",
}

func init() { proto.RegisterFile("api/coral.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1576 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x58, 0x5d, 0x6f, 0x1b, 0x45,
	0x17, 0x96, 0x1d, 0x7f, 0xc4, 0xc7, 0x4e, 0x9c, 0xcc, 0x9b, 0xe4, 0x5d, 0xb6, 0x55, 0x9b, 0x4e,
	0x04, 0x2d, 0x11, 0xb5, 0xd5, 0x94, 0xaf, 0x14, 0x2a, 0xea, 0xc6, 0x56, 0xf3, 0x41, 0xa5, 0xb0,
	0xb4, 0x44, 0xdc, 0xb1, 0x59, 0x4f, 0xec, 0x8d, 0x37, 0xbb, 0xdb, 0xdd, 0x71, 0x83, 0x41, 0x48,
	0x08, 0x89, 0x1b, 0xae, 0x90, 0x10, 0xff, 0x89, 0x7b, 0xfe, 0x01, 0xe2, 0x37, 0x70, 0x8d, 0xe6,
	0x6b, 0x77, 0xd6, 0xde, 0xa4, 0x89, 0xb8, 0xdb, 0x99, 0xf3, 0x9c, 0x67, 0xce, 0x9c, 0xe7, 0xcc,
	0xcc, 0xb1, 0xa1, 0x69, 0x87, 0x6e, 0xdb, 0x09, 0x22, 0xdb, 0x6b, 0x85, 0x51, 0x40, 0x03, 0x34,
	0x67, 0x87, 0xae, 0x79, 0x73, 0x10, 0x04, 0x03, 0x8f, 0xb4, 0x99, 0xd1, 0xf6, 0xfd, 0x80, 0xda,
	0xd4, 0x0d, 0xfc, 0x58, 0x40, 0xf0, 0x8f, 0x45, 0x58, 0xe9, 0x8c, 0xe9, 0x30, 0x88, 0xdc, 0xef,
	0xb8, 0xc1, 0x22, 0xaf, 0xc6, 0x24, 0xa6, 0x68, 0x09, 0xe6, 0x4e, 0xcf, 0xa9, 0x51, 0x58, 0x2f,
	0xdc, 0xab, 0x59, 0xec, 0x13, 0x21, 0x28, 0x85, 0x36, 0x1d, 0x1a, 0x45, 0x3e, 0xc5, 0xbf, 0xd1,
	0x13, 0xa8, 0x0e, 0x89, 0xdd, 0x27, 0x51, 0x6c, 0xcc, 0xad, 0xcf, 0xdd, 0xab, 0x6f, 0xbd, 0xd3,
	0xb2, 0x43, 0xb7, 0x95, 0xc7, 0xd8, 0xda, 0x15, 0xc0, 0x9e, 0x4f, 0xa3, 0x89, 0xa5, 0xdc, 0xd0,
	0x22, 0x14, 0xdd, 0xd0, 0x28, 0x71, 0xce, 0xa2, 0x1b, 0xa2, 0x9b, 0x50, 0x8b, 0x84, 0xc3, 0x5e,
	0xd7, 0x28, 0xf3, 0xe9, 0x74, 0x02, 0xad, 0x41, 0xc5, 0x19, 0xda, 0xd1, 0x80, 0x18, 0x95, 0xf5,
	0xc2, 0xbd, 0x79, 0x4b, 0x8e, 0xcc, 0x47, 0xd0, 0xd0, 0xe9, 0x59, 0xf4, 0x23, 0x32, 0x51, 0xd1,
	0x8f, 0xc8, 0x04, 0xad, 0x40, 0xf9, 0xb5, 0xed, 0x8d, 0x89, 0x0c, 0x5f, 0x0c, 0x1e, 0x15, 0x3f,
	0x2e, 0xe0, 0xaf, 0x60, 0x75, 0x2a, 0xde, 0x38, 0x0c, 0xfc, 0x98, 0x20, 0x03, 0xaa, 0xb6, 0xe7,
	0x05, 0xe7, 0xa4, 0xcf, 0x89, 0xe6, 0x2d, 0x35, 0x44, 0x1b, 0x50, 0x21, 0x3e, 0x75, 0xe9, 0x84,
	0xb3, 0xd5, 0xb7, 0xea, 0x7c, 0xd7, 0x3d, 0x3e, 0x65, 0x49, 0x13, 0xde, 0x87, 0x9b, 0x19, 0xde,
	0x2f, 0xdd, 0x81, 0xef, 0xfa, 0x83, 0x2b, 0xd0, 0xcb, 0xdc, 0x17, 0x93, 0xdc, 0x63, 0x0c, 0x8b,
	0x89, 0xfb, 0x05, 0xfa, 0xe0, 0x0d, 0x68, 0x4e, 0x2f, 0x31, 0x0b, 0x7a, 0x00, 0xab, 0x12, 0x74,
	0x68, 0x4f, 0xbc, 0xc0, 0xee, 0x2b, 0x3e, 0x03, 0xaa, 0xa1, 0x98, 0x91, 0x70, 0x35, 0xc4, 0x9b,
	0xb0, 0x36, 0xed, 0x72, 0x21, 0x7d, 0x0f, 0x96, 0x8f, 0x88, 0xe7, 0x1d, 0xf8, 0xc1, 0x79, 0x9a,
	0xc7, 0x35, 0xa8, 0xb8, 0x71, 0x3c, 0x26, 0x91, 0x44, 0xca, 0x11, 0x5b, 0xf2, 0xf4, 0x7c, 0x14,
	0xbf, 0x8c, 0x5c, 0xb9, 0x55, 0x35, 0xc4, 0x3f, 0x17, 0xa0, 0xb1, 0x7f, 0x74, 0x10, 0x27, 0x14,
	0x6d, 0x28, 0x8d, 0xc8, 0x24, 0x36, 0x0a, 0xbc, 0xc8, 0x6e, 0xf0, 0x74, 0xeb, 0x80, 0xd6, 0x01,
	0x99, 0xc8, 0xca, 0xe2, 0x40, 0xb3, 0x0b, 0xb5, 0x64, 0x2a, 0xa7, 0x1a, 0xee, 0xe8, 0xd5, 0xa0,
	0xf4, 0xdb, 0x3f, 0x3a, 0xe8, 0xf9, 0x8e, 0x5e, 0x1a, 0xef, 0x43, 0x65, 0xff, 0xe8, 0x45, 0xcf,
	0x77, 0x72, 0x8e, 0x83, 0x01, 0x55, 0xf2, 0x6d, 0xe8, 0x46, 0x24, 0xe6, 0x24, 0x73, 0x96, 0x1a,
	0x0a, 0xaf, 0x83, 0xc4, 0x6b, 0x94, 0x7a, 0x8d, 0x2e, 0xf1, 0xfa, 0xbd, 0x08, 0x15, 0x51, 0x41,
	0x0c, 0xf4, 0x9a, 0x44, 0xb1, 0x1b, 0xf8, 0x4a, 0x0b, 0x39, 0xe4, 0xa7, 0xa5, 0x2f, 0xb3, 0x55,
	0x74, 0xfb, 0xe8, 0x13, 0x00, 0x9b, 0xd2, 0xc8, 0x3d, 0x1e, 0x53, 0xa2, 0x8e, 0xe0, 0x0d, 0xad,
	0x18, 0x5b, 0x9d, 0xc4, 0x2a, 0xb2, 0xa3, 0xc1, 0xd1, 0x47, 0xb0, 0x68, 0x8f, 0xe9, 0x90, 0x95,
	0xab, 0xc3, 0x2b, 0xd4, 0x28, 0x71, 0x82, 0xa6, 0x46, 0xc0, 0x2a, 0xd8, 0x9a, 0x82, 0xa1, 0xf7,
	0xa0, 0x7a, 0xec, 0x7a, 0x9e, 0xeb, 0x0f, 0x8c, 0x32, 0xf7, 0x40, 0x9a, 0xc7, 0x53, 0x61, 0xb1,
	0x14, 0xc4, 0x7c, 0x0c, 0xcd, 0xa9, 0x28, 0xae, 0x75, 0x3c, 0x7f, 0x2d, 0x00, 0xa4, 0xb1, 0xb0,
	0x5b, 0xc8, 0xb7, 0xcf, 0x88, 0xf4, 0xe5, 0xdf, 0xe8, 0x21, 0x54, 0x1c, 0xcf, 0x76, 0xcf, 0x58,
	0x4e, 0xa7, 0x33, 0xc0, 0x9c, 0x5a, 0x3b, 0xdc, 0x2a, 0x32, 0x20, 0xa1, 0xe6, 0x36, 0xd4, 0xb5,
	0xe9, 0x6b, 0x85, 0xb4, 0x0d, 0x0b, 0x99, 0xbd, 0xf2, 0xa3, 0xec, 0x38, 0xc1, 0xd8, 0x57, 0x15,
	0xa2, 0x86, 0xd3, 0x82, 0xe1, 0xdb, 0xca, 0x75, 0xaf, 0xfb, 0xc5, 0x98, 0x44, 0x13, 0x09, 0x28,
	0xf0, 0x5a, 0x60, 0x80, 0xc7, 0x50, 0x17, 0x80, 0x5c, 0x33, 0xba, 0x95, 0x11, 0x9c, 0x6d, 0xb7,
	0xa6, 0x6b, 0x8a, 0x3f, 0x50, 0xc9, 0xfa, 0xdc, 0x8d, 0x29, 0xba, 0x0b, 0xf3, 0xfc, 0x32, 0x72,
	0x89, 0x3a, 0x3a, 0x99, 0x9b, 0x2a, 0x31, 0xe2, 0xbf, 0x0a, 0x50, 0xd9, 0x4b, 0x4e, 0xe5, 0x15,
	0x8b, 0x4f, 0x49, 0x31, 0xa7, 0x49, 0x91, 0x9e, 0xf5, 0xd2, 0x45, 0x67, 0xbd, 0x9c, 0x39, 0xeb,
	0x68, 0x1d, 0xea, 0x02, 0xc3, 0xd5, 0xe0, 0xf7, 0x7a, 0xcd, 0xd2, 0xa7, 0x10, 0x86, 0x46, 0x3c,
	0x3e, 0x3e, 0x25, 0x0e, 0x15, 0x90, 0x2a, 0x87, 0x64, 0xe6, 0x18, 0x46, 0x1e, 0x24, 0x81, 0x99,
	0x17, 0x18, 0x7d, 0x8e, 0xe5, 0x5e, 0xec, 0xf1, 0xa2, 0xdc, 0x6f, 0x43, 0x5d, 0x00, 0x84, 0x39,
	0xaf, 0xd4, 0xd2, 0xfd, 0x15, 0xf5, 0xfd, 0xe1, 0x07, 0x00, 0xc2, 0x95, 0xe7, 0x7d, 0x43, 0xbb,
	0xf1, 0xd2, 0xac, 0x0b, 0x40, 0xe2, 0xf2, 0x4b, 0x09, 0x2a, 0x87, 0x81, 0xe7, 0x3a, 0x7a, 0x20,
	0xd9, 0xcc, 0x16, 0xb5, 0x95, 0x9f, 0xc3, 0x92, 0x78, 0x58, 0x3a, 0xd3, 0x07, 0xfe, 0x0e, 0x67,
	0x17, 0x54, 0xaa, 0xea, 0xa7, 0x8e, 0xfd, 0x8c, 0x2b, 0xdb, 0x08, 0x39, 0x39, 0x21, 0x0e, 0x55,
	0x42, 0x89, 0x11, 0xea, 0xc2, 0xb2, 0x7c, 0x6e, 0xb5, 0x75, 0xca, 0xfc, 0x96, 0x5c, 0xe3, 0xeb,
	0x58, 0xd3, 0x56, 0x6b, 0xd6, 0x01, 0xbd, 0x0b, 0xa5, 0x21, 0xa5, 0xa1, 0x51, 0xe1, 0x01, 0xae,
	0xea, 0x01, 0xee, 0x52, 0x1a, 0xca, 0x9b, 0x9a, 0x41, 0x18, 0x74, 0x10, 0x85, 0x8e, 0x51, 0x9d,
	0x85, 0x3e, 0x8b, 0x42, 0x47, 0x42, 0x19, 0xc4, 0xdc, 0x81, 0xd5, 0xdc, 0xed, 0x5d, 0xe7, 0xf0,
	0x9a, 0xbb, 0x50, 0x4b, 0x42, 0xc8, 0x71, 0x7c, 0x3b, 0xfb, 0x32, 0x88, 0xbb, 0xd0, 0x0a, 0xc6,
	0x94, 0x74, 0xa2, 0xc8, 0x9e, 0xe8, 0x4c, 0xfb, 0x50, 0x4b, 0x22, 0xcc, 0x61, 0xba, 0x9b, 0x65,
	0x5a, 0xe6, 0x4c, 0xcf, 0x09, 0x1d, 0x06, 0x7d, 0xb1, 0x3f, 0xfd, 0x4a, 0xf9, 0xa3, 0x00, 0xcb,
	0x33, 0x99, 0x45, 0x8f, 0xd3, 0xf6, 0x4a, 0x14, 0xd2, 0x46, 0xbe, 0x04, 0x97, 0xf6, 0x56, 0xc5,
	0xa4, 0xb7, 0x42, 0x50, 0x1a, 0x06, 0x31, 0x55, 0x07, 0x96, 0x7d, 0xb3, 0x44, 0xbd, 0x62, 0xd5,
	0x2e, 0xcb, 0x40, 0x0c, 0xfe, 0x53, 0x3f, 0xd5, 0x05, 0x48, 0xf3, 0x85, 0x3e, 0x84, 0x85, 0x88,
	0x8d, 0xf8, 0x96, 0xd3, 0x7b, 0x68, 0x29, 0xcd, 0xab, 0x4c, 0x46, 0x16, 0x86, 0xcf, 0xa0, 0xae,
	0x59, 0xc5, 0x0d, 0xcb, 0x1b, 0xd7, 0xf4, 0x86, 0xe5, 0xc3, 0xfc, 0x82, 0x2d, 0x5e, 0xb3, 0x60,
	0xf1, 0x2e, 0xd4, 0x85, 0x34, 0x22, 0xea, 0x6d, 0x58, 0x3c, 0x4b, 0x95, 0x4a, 0xc3, 0xce, 0x11,
	0x71, 0x0a, 0x88, 0x5f, 0x40, 0x43, 0xb7, 0xe7, 0xc7, 0x57, 0xb8, 0x6e, 0x7c, 0xb7, 0x61, 0x41,
	0xf0, 0x5d, 0x72, 0x77, 0x09, 0x80, 0x30, 0x6f, 0xe6, 0xdc, 0x16, 0x05, 0xfe, 0x5a, 0xcc, 0xcc,
	0xb3, 0x37, 0x43, 0xb8, 0xaa, 0x37, 0x23, 0xcc, 0x6e, 0xba, 0xae, 0x9d, 0x49, 0x2b, 0x31, 0xe2,
	0x2a, 0x94, 0x7b, 0x67, 0x21, 0x9d, 0x6c, 0xfd, 0xb3, 0x00, 0xe5, 0x1d, 0xf6, 0xb3, 0x03, 0x7d,
	0x0d, 0x35, 0xd5, 0xf2, 0x12, 0xf4, 0xd6, 0x85, 0x3f, 0x05, 0x4c, 0x33, 0xcf, 0x24, 0x3a, 0x39,
	0xbc, 0xfa, 0xd3, 0x9f, 0x7f, 0xff, 0x56, 0x6c, 0x62, 0x68, 0xdb, 0x8a, 0xea, 0x51, 0x61, 0x13,
	0x79, 0xb0, 0x94, 0x50, 0x77, 0xfc, 0x3e, 0xeb, 0x48, 0x2f, 0x5b, 0xe1, 0xce, 0xac, 0x69, 0xaa,
	0x39, 0xc6, 0x26, 0x5f, 0x68, 0x05, 0x37, 0xd3, 0x85, 0xda, 0xb1, 0x3b, 0xf0, 0xd9, 0x6a, 0x3b,
	0x50, 0xe2, 0x2b, 0xfc, 0x8f, 0xd3, 0x64, 0x5b, 0x6f, 0x73, 0x25, 0x3b, 0x29, 0xe9, 0x96, 0x38,
	0x1d, 0xe0, 0x72, 0x42, 0xf2, 0x0d, 0xd4, 0x19, 0x48, 0x76, 0xcd, 0xc8, 0xd4, 0xdd, 0xb2, 0xdd,
	0xb7, 0x79, 0x23, 0xd7, 0x26, 0x99, 0x0d, 0xce, 0x8c, 0xf0, 0x02, 0x67, 0x6e, 0xcb, 0xbe, 0x9c,
	0xad, 0xf0, 0x99, 0x7a, 0xed, 0xf7, 0xfc, 0x93, 0x00, 0xa9, 0x2e, 0x96, 0x35, 0xac, 0xa6, 0xfe,
	0xd0, 0xe3, 0xff, 0x73, 0x86, 0x65, 0xdc, 0x68, 0x0b, 0xf1, 0xef, 0xbb, 0xfe, 0x49, 0xc0, 0x08,
	0x7a, 0x50, 0x4b, 0xfa, 0x75, 0x04, 0xc2, 0x85, 0x69, 0x6a, 0x8a, 0xd2, 0x9c, 0xe9, 0xe5, 0xf1,
	0x0a, 0x67, 0x5a, 0x44, 0x8d, 0x76, 0xeb, 0x9c, 0x78, 0xde, 0xfd, 0x11, 0xf7, 0xec, 0x41, 0x89,
	0x75, 0xe3, 0x19, 0x86, 0xe5, 0x99, 0x26, 0x1d, 0xdf, 0xe2, 0xce, 0x06, 0x5a, 0xd3, 0x9d, 0xdb,
	0xac, 0x11, 0x68, 0x9d, 0xc6, 0x81, 0x8f, 0x9e, 0x42, 0xed, 0x19, 0xa1, 0xb2, 0x09, 0xd6, 0x7b,
	0x4a, 0x59, 0xf4, 0xd9, 0x4d, 0xa5, 0xa1, 0x88, 0x4d, 0xb5, 0xbf, 0x77, 0xfb, 0x3f, 0xa0, 0x27,
	0x00, 0xac, 0x8c, 0x25, 0xc9, 0x92, 0xe6, 0x20, 0x28, 0xf4, 0xe6, 0x96, 0x01, 0x71, 0x93, 0xd3,
	0xd4, 0x50, 0x55, 0xd2, 0xa0, 0x4f, 0xa1, 0xb1, 0x13, 0x11, 0x9b, 0x12, 0xc9, 0xa1, 0x2f, 0x9a,
	0x8d, 0x00, 0x71, 0xd7, 0x06, 0x56, 0xae, 0x2c, 0xa3, 0x1d, 0x68, 0xbc, 0x0c, 0xfb, 0x57, 0xf1,
	0x96, 0xa2, 0x98, 0x99, 0xf8, 0x19, 0xc5, 0x13, 0xa8, 0x1f, 0xda, 0xd4, 0x19, 0x5e, 0x95, 0x61,
	0x6b, 0x86, 0xa1, 0x0b, 0x8d, 0x2e, 0xf1, 0x48, 0x12, 0x44, 0x5e, 0x2e, 0x35, 0xad, 0x54, 0x2a,
	0x37, 0xb3, 0xa9, 0x14, 0x72, 0xc8, 0xb6, 0x10, 0x69, 0x2d, 0x4c, 0x56, 0x0e, 0x31, 0xa7, 0xc9,
	0x21, 0xfa, 0x1b, 0xc1, 0xd1, 0x81, 0x3a, 0xcb, 0xb2, 0xc0, 0xc4, 0x52, 0x0f, 0xad, 0xc9, 0x92,
	0x7a, 0xa4, 0xbd, 0x93, 0xa6, 0x87, 0x6c, 0x1d, 0x13, 0x3d, 0x64, 0x24, 0xfa, 0xaa, 0xd9, 0x10,
	0x52, 0x3d, 0x84, 0x6b, 0x46, 0x8f, 0x37, 0x7a, 0xa7, 0x7a, 0x68, 0x1b, 0xd0, 0xf5, 0xb8, 0x2a,
	0xc3, 0xd6, 0x0c, 0x43, 0xa2, 0xc7, 0x25, 0xc9, 0xcc, 0xd7, 0x43, 0xcf, 0xa5, 0xd0, 0x43, 0x3e,
	0x2b, 0x48, 0xbb, 0x94, 0xb3, 0x7a, 0x88, 0x39, 0x4d, 0x0f, 0x7e, 0x63, 0x27, 0x9a, 0x36, 0x58,
	0x96, 0xd5, 0x6b, 0x25, 0x05, 0xd1, 0x5e, 0x0e, 0x29, 0x48, 0xfa, 0x20, 0x68, 0x82, 0x08, 0xa2,
	0x54, 0x10, 0x19, 0x8a, 0xbe, 0x6c, 0x36, 0x86, 0x54, 0x10, 0xe1, 0x9a, 0x11, 0xe4, 0x8d, 0xde,
	0xa9, 0x20, 0xda, 0x0e, 0x74, 0x41, 0xae, 0xca, 0xb0, 0x35, 0xc3, 0x90, 0x08, 0x72, 0x49, 0x36,
	0xf3, 0x05, 0xd1, 0x88, 0x8e, 0x2b, 0xfc, 0x3f, 0xb4, 0x87, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff,
	0x25, 0xa7, 0xc1, 0xfb, 0x79, 0x13, 0x00, 0x00,
}
